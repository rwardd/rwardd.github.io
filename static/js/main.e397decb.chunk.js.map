{"version":3,"sources":["globalState.tsx","theme.tsx","components/utils/NetworkErrorMessage.tsx","components/utils/ConnectWallet.tsx","components/utils/Loading.tsx","components/Header.tsx","components/utils/NoWalletDetected.tsx","components/transactionComponents/SetInvalidated.tsx","constants.tsx","components/transactionComponents/SetWinner.tsx","components/ConfirmResultModal.tsx","components/AdminFixtureControls.tsx","components/transactionComponents/PlaceBet.tsx","components/PlaceBetModal.tsx","components/FixtureControls.tsx","components/utils/MathUtils.tsx","components/viewComponents/GetBettingTotals.tsx","components/viewComponents/GetFixtures.tsx","components/viewComponents/GetBets.tsx","components/transactionComponents/RetrieveFunds.tsx","components/ActiveBets.tsx","components/InactiveBets.tsx","components/UQBetDashboard.tsx","components/pages/UQBet.tsx","components/transactionComponents/AddFixture.tsx","components/utils/BackButton.tsx","components/pages/admin/AddFixturePage.tsx","components/utils/TakeEarnings.tsx","components/AdminDashboard.tsx","components/pages/admin/AdminPage.tsx","index.tsx"],"names":["GlobalState","React","createContext","GlobalStateProvider","props","children","useState","undefined","selectedAddress","setSelectedAddress","balance","setBalance","txBeingSent","setTxBeingSet","transactionError","setTransactionError","networkError","setNetworkError","bettingContract","setContract","initialState","resetState","Provider","value","COLORS","FONT_SIZE","BOX","DASH","theme","global","colors","brand","focus","border","color","tag","seperator","NetworkErrorMessage","message","dismiss","className","role","type","data-dismiss","aria-label","onClick","aria-hidden","ConnectWallet","connectWallet","Loading","style","position","zIndex","top","left","width","height","background","marginLeft","marginTop","textAlign","headerStyling","display","flexDirection","justifyContent","alignItems","marginBottom","paddingLeft","paddingRight","innerDisplay","backgroundColor","borderRadius","padding","accountDisplayStyling","borderStyle","borderWidth","borderColor","iconStyling","textStyling","Header","useContext","logo","fontSize","Button","icon","hoverIndicator","marginRight","slice","size","NoWalletDetected","href","target","rel","SetInvalidated","fixtureID","setShow","refreshFixtureData","_setInvalidated","a","Error","setInvalidated","tx","hash","wait","status","code","console","error","primary","label","margin","SetWinner","team","_setWinner","winner","setWinner","titleStyling","modalStyling","ConfirmResultModal","show","fixture","fixId","home","away","date","Box","Layer","onEsc","onClickOutside","animation","bottom","justify","NameValueList","NameValuePair","name","Text","AdmimFixtureControls","showModal","setShowModal","active","invalidated","disabled","PlaceBet","refreshBets","amount","setAmount","setError","setStatus","_placeBet","placeBet","e","preventDefault","ethers","utils","parseEther","toString","Form","onReset","onSubmit","FormField","Select","options","onChange","option","htmlFor","TextInput","Number","direction","gap","PlaceBetModal","dark","FixtureControls","calculatePotentialEarnings","winBetTotal","loseBetTotal","betAmount","winnersTotal","formatEther","losersTotal","bet","_getBettingTotals","fixtureId","getBettingTotals","GetOdds","odds","setOdds","processBettingOdds","_home","Math","floor","_away","gcd","greatestCommonDivisor","b","homeBets","awayBets","getBettingOdds","useCallback","bettingTotals","formattedOdds","useEffect","interval","setInterval","clearInterval","Spinner","GetPotentialEarnings","earnings","setEarnings","estimateEarnings","payOut","isNegative","getFixture","potetialEarnings","getDisplayOptions","sign","weight","toFixed","GetFixtures","admin","fixtures","setFixtures","_getFixtures","fixtureList","getFixtureCount","fixtureCount","i","push","length","Table","columns","tableCells","map","columnTitle","align","TableCell","scope","key","TableHeader","TableRow","tableHeader","fixtureData","AdminFixtureControls","TableBody","tableData","GetBets","userBets","setUserBets","_getUserBets","getUserBets","userBetIds","getBet","RetrieveFunds","betId","_retrieveFunds","betID","retrieveFunds","gt","isZero","ActiveBets","filteredActiveBets","filter","payedOut","betData","formattedAmount","InactiveBets","inactiveBets","won","Checkmark","Clear","Close","betStatus","formattedPayOut","getPayOut","betSlipStyling","minHeight","UQBetDashboard","Heading","level","Distribution","values","overflow","pad","fill","UQBet","_pollDataInterval","_provider","_contractOwner","_setContractOwner","_checkNetwork","window","ethereum","networkVersion","providers","Web3Provider","contract","Contract","contractAddress","Token","TokenArtifact","abi","getSigner","owner","toLowerCase","_updateEthBalance","userAddress","getBalance","_stopPollingData","_initialize","_initializeEthers","_startPollingData","request","method","accountAddy","on","newAddress","document","location","replace","body","to","_connectWallet","AddFixture","awayTeam","setAwayTeam","homeTeam","setHomeTeam","setDate","_addFixture","addFixture","resetForm","placeholder","DateInput","format","Date","toLocaleDateString","BackButton","navigate","useNavigate","FormPrevious","addFixturePageStyle","headerStyle","AddFixturePage","justifySelf","flexGrow","TakeEarnings","_drainContract","takeEarnings","adminDashboardStyle","dashboardHeaderStyle","AdminDashboard","float","AdminPage","ReactDOM","render","StrictMode","Grommet","path","element","getElementById"],"mappings":"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","file":"static/js/main.e397decb.chunk.js","sourcesContent":["import { ethers } from \"ethers\";\nimport React, { ReactNode, useState } from \"react\";\n\n// This is our global state\n\nexport const GlobalState = React.createContext<Partial<IGlobalState>>({});\n\nexport interface IGlobalState {\n  // The user's address\n  selectedAddress: string | undefined;\n  setSelectedAddress: any;\n  // The user's ethereum balance\n  balance: any;\n  setBalance: any;\n  // The ID about transactions being sent\n  txBeingSent: any;\n  setTxBeingSet: any;\n  // Any possible transaction error\n  transactionError: any;\n  setTransactionError: any;\n  // Any network error\n  networkError: any;\n  setNetworkError: any;\n  // The betting Contract\n  bettingContract: ethers.Contract | undefined;\n  setContract: any;\n  // Function to reset state\n  resetState: () => void;\n}\n\ninterface GlobalStateProviderProps {\n  children: ReactNode;\n}\n\nexport const GlobalStateProvider: React.FC<GlobalStateProviderProps> = (\n  props\n) => {\n  const { children } = props;\n\n  const [selectedAddress, setSelectedAddress] = useState(undefined);\n  const [balance, setBalance] = useState(undefined);\n  const [txBeingSent, setTxBeingSet] = useState(undefined);\n  const [transactionError, setTransactionError] = useState(undefined);\n  const [networkError, setNetworkError] = useState(undefined);\n  const [bettingContract, setContract] = useState(undefined);\n\n  function resetState() {\n    setSelectedAddress(undefined);\n    setBalance(undefined);\n    setTxBeingSet(undefined);\n    setTransactionError(undefined);\n    setNetworkError(undefined);\n    setContract(undefined);\n  }\n\n  const initialState: IGlobalState = {\n    selectedAddress,\n    setSelectedAddress,\n    balance,\n    setBalance,\n    txBeingSent,\n    setTxBeingSet,\n    transactionError,\n    setTransactionError,\n    networkError,\n    setNetworkError,\n    bettingContract,\n    setContract,\n    resetState,\n  };\n\n  return (\n    <GlobalState.Provider value={initialState}>{children}</GlobalState.Provider>\n  );\n};\n","export const COLORS = {\n  purple: \"#65388E\",\n  lightPurple: \"#7c46aa\",\n  darkPurple: \"#4A1F73\",\n  white: \"#FFFFFF\",\n  green: \"#00C781\",\n};\n\nexport const FONT_SIZE = {\n  title: 70,\n  four: 18,\n};\n\nexport const BOX = {\n  borderRadius: 20,\n  padding: 40,\n};\n\nexport const DASH = {\n  width: \"1200px\",\n  minHeight: \"650px\",\n};\n\nexport const theme = {\n  global: {\n    colors: {\n      brand: COLORS.purple,\n      \"accent-1\": COLORS.green,\n    },\n    focus: {\n      border: {\n        color: COLORS.green,\n      },\n    },\n    tag: {\n      seperator: \"\",\n    },\n  },\n};","import React from \"react\";\n\ninterface NetworkErrorMessageProps {\n  message: any;\n  dismiss: any;\n}\n\nexport const NetworkErrorMessage: React.FC<NetworkErrorMessageProps> = (\n  props\n) => {\n  const { message, dismiss } = props;\n\n  return (\n    <div className='alert alert-danger' role='alert'>\n      {message}\n      <button\n        type='button'\n        className='close'\n        data-dismiss='alert'\n        aria-label='Close'\n        onClick={dismiss}\n      >\n        <span aria-hidden='true'>&times;</span>\n      </button>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { NetworkErrorMessage } from \"./NetworkErrorMessage\";\n\ninterface ConnectWalletProps {\n  connectWallet: any;\n  networkError: any;\n  dismiss: any;\n}\n\nexport const ConnectWallet: React.FC<ConnectWalletProps> = (props) => {\n  const { connectWallet, networkError, dismiss } = props;\n\n  return (\n    <div className='container'>\n      <div className='row justify-content-md-center'>\n        <div className='col-12 text-center'>\n          {/* Metamask network should be set to Localhost:8545. */}\n          {networkError && (\n            <NetworkErrorMessage message={networkError} dismiss={dismiss} />\n          )}\n        </div>\n        <div className='col-6 p-4 text-center'>\n          <p className='text-white'>Please connect to your wallet.</p>\n          <button\n            className='btn btn-warning'\n            type='button'\n            onClick={connectWallet}\n          >\n            Connect Wallet\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport function Loading() {\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        zIndex: 2,\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        background: \"rgba(255, 255, 255, 0.5)\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          zIndex: 3,\n          top: \"50%\",\n          left: \"50%\",\n          width: \"100px\",\n          height: \"50px\",\n          marginLeft: \"-50px\",\n          marginTop: \" -25px\",\n          textAlign: \"center\",\n        }}\n      >\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { Button } from \"grommet\";\nimport { Header as GrommetHeader } from \"grommet\";\nimport React, { FC, useContext } from \"react\";\nimport { GlobalState } from \"../globalState\";\nimport { COLORS, FONT_SIZE } from \"../theme\";\nimport { Loading } from \"./utils/Loading\";\nimport { FaEthereum } from \"react-icons/fa\";\n\nconst Header: FC = () => {\n  const { balance, selectedAddress } = useContext(GlobalState);\n\n  const logo = (\n    <h1\n      style={{\n        fontSize: FONT_SIZE.title,\n      }}\n    >\n      UQBet\n    </h1>\n  );\n\n  const accountDisplay = () => {\n    if (!balance) {\n      return <Loading />;\n    } else {\n      return (\n        <div style={accountDisplayStyling}>\n          <h5\n            style={{ ...textStyling, marginRight: \"10px\" }}\n          >{`${balance} ETH`}</h5>\n          <div style={innerDisplay}>\n            <h5\n              style={{\n                ...textStyling,\n                marginRight: \"10px\",\n                marginLeft: \"8px\",\n              }}\n            >{`${selectedAddress?.slice(0, 5)}...${selectedAddress?.slice(\n              -5,\n              -1\n            )}`}</h5>\n            <FaEthereum style={iconStyling} size='35px' />\n          </div>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div style={headerStyling}>\n      <GrommetHeader background='brand'>\n        <Button icon={logo} hoverIndicator />\n      </GrommetHeader>\n      {accountDisplay()}\n    </div>\n  );\n};\n\nconst headerStyling: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  color: COLORS.white,\n  marginTop: \"10px\",\n  marginBottom: \"10px\",\n  paddingLeft: \"12px\",\n  paddingRight: \"45px\",\n};\n\nconst innerDisplay: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  backgroundColor: COLORS.purple,\n  color: \"white\",\n  borderRadius: 90,\n  padding: \"5px 10px\",\n};\n\nconst accountDisplayStyling: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n  justifyContent: \"space-between\",\n  color: \"white\",\n  backgroundColor: COLORS.lightPurple,\n  borderRadius: 90,\n  paddingLeft: \"12px\",\n  borderStyle: \"solid\",\n  borderWidth: \"2px\",\n  borderColor: COLORS.lightPurple,\n};\n\nconst iconStyling: React.CSSProperties = {\n  backgroundColor: \"#383838\",\n  borderRadius: 90,\n  padding: \"5px\",\n};\n\nconst textStyling: React.CSSProperties = { position: \"relative\", top: 4.5 };\n\nexport default Header;\n","import React, { FC } from \"react\";\n\nexport const NoWalletDetected: FC = () => {\n  return (\n    <div className='container'>\n      <div className='row justify-content-md-center'>\n        <div className='col-6 p-4 text-center'>\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{\" \"}\n            <a\n              href='http://metamask.io'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { FC, useContext } from \"react\";\nimport { GlobalState } from \"../../globalState\";\nimport { ERROR_CODE_TX_REJECTED_BY_USER } from \"../../constants\";\nimport { Button } from \"grommet\";\nimport { BigNumber } from \"ethers\";\n\ninterface SetInvalidatedProps {\n  fixtureID: BigNumber;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  refreshFixtureData: () => void;\n}\n\nconst SetInvalidated: FC<SetInvalidatedProps> = (props) => {\n  const { fixtureID, setShow, refreshFixtureData } = props;\n\n  const { setTransactionError, bettingContract, setTxBeingSet } =\n    useContext(GlobalState);\n\n  const _setInvalidated = async (fixtureID: BigNumber) => {\n    try {\n      setTransactionError(undefined);\n\n      if (!bettingContract) {\n        throw new Error(\"Betting Contract not available\");\n      }\n\n      const tx = await bettingContract.setInvalidated(fixtureID);\n      setTxBeingSet(tx.hash);\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error: any) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(\"Caught error setting fixutre as invalidated \", error);\n      setTransactionError(error);\n    } finally {\n      setTxBeingSet(undefined);\n      setShow(false);\n      refreshFixtureData();\n    }\n  };\n\n  return (\n    <>\n      <Button\n        primary\n        label='Set Invalidated'\n        onClick={() => _setInvalidated(fixtureID)}\n        margin='xsmall'\n      />\n    </>\n  );\n};\n\nexport default SetInvalidated;\n","// This is an error code that indicates that the user canceled a transaction\nexport const ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\n// How often to poll the data on the dashboard\nexport const REFRESH_RATE = 1000;\n\n// How much comission UQSports takes from winnings (0.1 = 10%)\nexport const PLATFORM_COMISSION = 0.1;","import React, { FC, useContext } from \"react\";\nimport { GlobalState } from \"../../globalState\";\nimport { ERROR_CODE_TX_REJECTED_BY_USER } from \"../../constants\";\nimport { Button } from \"grommet\";\nimport { BigNumber } from \"ethers\";\n\ninterface SetWinnerProps {\n  team: string;\n  fixtureID: BigNumber;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  refreshFixtureData: () => void;\n}\n\nconst SetWinner: FC<SetWinnerProps> = (props) => {\n  const { team, fixtureID, setShow, refreshFixtureData } = props;\n\n  const { setTransactionError, bettingContract, setTxBeingSet } =\n    useContext(GlobalState);\n\n  const _setWinner = async (fixtureID: BigNumber, winner: string) => {\n    try {\n      setTransactionError(undefined);\n\n      if (!bettingContract) {\n        throw new Error(\"Betting Contract not available\");\n      }\n\n      const tx = await bettingContract.setWinner(fixtureID, winner);\n      setTxBeingSet(tx.hash);\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error: any) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(\"Caught error setting winner \", error);\n      setTransactionError(error);\n    } finally {\n      setTxBeingSet(undefined);\n      setShow(false);\n      refreshFixtureData();\n    }\n  };\n\n  return (\n    <>\n      <Button\n        primary\n        label={`Set winner as ${team}`}\n        onClick={() => _setWinner(fixtureID, team)}\n        margin='xsmall'\n      />\n    </>\n  );\n};\n\nexport default SetWinner;\n","import { Box, Text, Layer, NameValueList, NameValuePair } from \"grommet\";\nimport React, { FC } from \"react\";\nimport { BOX, COLORS } from \"../theme\";\nimport { Fixture } from \"../types\";\nimport SetInvalidated from \"./transactionComponents/SetInvalidated\";\nimport SetWinner from \"./transactionComponents/SetWinner\";\n\ninterface ConfirmResultModalProps {\n  show: boolean;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  fixture: Fixture;\n  refreshFixtureData: () => void;\n}\n\nconst ConfirmResultModal: FC<ConfirmResultModalProps> = (props) => {\n  const { show, setShow, fixture, refreshFixtureData } = props;\n  const { fixId, home, away, date } = fixture;\n\n  function fixtureDetails() {\n    return (\n      <Box width='medium' margin={{ bottom: \"medium\" }} justify='center'>\n        <NameValueList>\n          <NameValuePair name='Home team'>\n            <Text color='text-strong'>{home}</Text>\n          </NameValuePair>\n          <NameValuePair name='Away team'>\n            <Text color='text-strong'>{away}</Text>\n          </NameValuePair>\n          <NameValuePair name='Date'>\n            <Text color='text-strong'>{date}</Text>\n          </NameValuePair>\n        </NameValueList>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {show && (\n        <Layer\n          onEsc={() => setShow(false)}\n          onClickOutside={() => setShow(false)}\n          style={modalStyling}\n          position='top'\n          margin='none'\n          animation='fadeIn'\n        >\n          <h3 style={titleStyling}>{`Confirm result`}</h3>\n          {fixtureDetails()}\n          <SetWinner\n            team={home}\n            fixtureID={fixId}\n            setShow={setShow}\n            refreshFixtureData={refreshFixtureData}\n          />\n          <SetWinner\n            team={away}\n            fixtureID={fixId}\n            setShow={setShow}\n            refreshFixtureData={refreshFixtureData}\n          />\n          <SetInvalidated\n            fixtureID={fixId}\n            setShow={setShow}\n            refreshFixtureData={refreshFixtureData}\n          />\n        </Layer>\n      )}\n    </Box>\n  );\n};\n\nconst titleStyling: React.CSSProperties = {\n  color: COLORS.purple,\n  marginBottom: \"20px\",\n};\n\nconst modalStyling: React.CSSProperties = {\n  padding: BOX.padding,\n  borderRadius: BOX.borderRadius,\n  marginTop: \"10%\",\n};\n\nexport default ConfirmResultModal;\n","import React, { FC, useState } from \"react\";\nimport { Button } from \"grommet\";\nimport { Fixture } from \"../types\";\nimport SetResultModal from \"./ConfirmResultModal\";\n\ninterface AdminFixtureControlProps {\n  fixture: Fixture;\n  refreshFixtureData: () => void;\n}\n\nconst AdmimFixtureControls: FC<AdminFixtureControlProps> = (props) => {\n  const { fixture, refreshFixtureData } = props;\n  const [showModal, setShowModal] = useState(false);\n\n  function getLabel(): string {\n    if (fixture.active) {\n      return \"Set Result\";\n    }\n\n    if (fixture.invalidated) {\n      return \"Invalidated\";\n    }\n\n    if (!fixture.active) {\n      return `${fixture.winner} won`;\n    }\n\n    return \"Error\";\n  }\n\n  return (\n    <div>\n      <Button\n        primary\n        label={getLabel()}\n        disabled={!fixture.active}\n        size='small'\n        onClick={() => setShowModal(true)}\n      />\n      {fixture.active && (\n        <SetResultModal\n          setShow={setShowModal}\n          show={showModal}\n          fixture={fixture}\n          refreshFixtureData={refreshFixtureData}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default AdmimFixtureControls;\n","import React, { FC, useContext, useState } from \"react\";\nimport { GlobalState } from \"../../globalState\";\nimport { ERROR_CODE_TX_REJECTED_BY_USER } from \"../../constants\";\nimport { Box, Button, Form, FormField, Select, TextInput } from \"grommet\";\nimport { BigNumber, ethers } from \"ethers\";\n\ninterface PlaceBetProps {\n  home: string;\n  away: string;\n  fixtureID: BigNumber;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  refreshBets: () => void;\n}\n\nconst PlaceBet: FC<PlaceBetProps> = (props) => {\n  const { home, away, fixtureID, setShow, refreshBets } = props;\n\n  const [winner, setWinner] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [error, setError] = useState<null | Error>(null);\n  const [status, setStatus] = useState(\"typing\");\n\n  const { setTransactionError, bettingContract, setTxBeingSet } =\n    useContext(GlobalState);\n\n  const _placeBet = async (\n    fixtureID: BigNumber,\n    team: string,\n    amount: BigNumber\n  ) => {\n    try {\n      setTransactionError(undefined);\n\n      if (!bettingContract) {\n        throw new Error(\"Betting Contract not available\");\n      }\n\n      const tx = await bettingContract.placeBet(fixtureID, team, amount, {\n        value: amount,\n      });\n      setTxBeingSet(tx.hash);\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error: any) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(\"Caught error trying to place bet \", error);\n      setTransactionError(error);\n    } finally {\n      setTxBeingSet(undefined);\n    }\n  };\n\n  function resetForm(): void {\n    setWinner(\"\");\n    setAmount(0);\n  }\n\n  function isFormEmpty(): boolean {\n    if (winner === \"\" || amount === 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  async function submitBet(e: any) {\n    e.preventDefault();\n    setStatus(\"submitting\");\n    try {\n      await _placeBet(\n        fixtureID,\n        winner,\n        ethers.utils.parseEther(amount.toString())\n      );\n      setStatus(\"success\");\n      setShow(false);\n      refreshBets();\n    } catch (err) {\n      setStatus(\"typing\");\n      if (err instanceof Error) {\n        setError(err);\n        console.error(error);\n      }\n    }\n  }\n\n  return (\n    <>\n      <Form value={\"Hello\"} onReset={resetForm} onSubmit={submitBet}>\n        <FormField label='To Win'>\n          <Select\n            options={[home, away]}\n            value={winner}\n            onChange={({ option }) => setWinner(option)}\n          />\n        </FormField>\n        <FormField htmlFor='text-input-id' label='Amount (ETH)'>\n          <TextInput\n            value={amount}\n            type='number'\n            onChange={(e) => setAmount(Number(e.target.value))}\n          />\n        </FormField>\n        <Box direction='row' gap='medium' margin={{ top: \"medium\" }}>\n          <Button\n            type='submit'\n            primary\n            label='Submit'\n            disabled={isFormEmpty() || status === \"submitting\"}\n          />\n          <Button type='reset' label='Reset' />\n        </Box>\n      </Form>\n    </>\n  );\n};\n\nexport default PlaceBet;\n","import { Box, Text, Layer, NameValueList, NameValuePair } from \"grommet\";\nimport React, { FC } from \"react\";\nimport { BOX, COLORS } from \"../theme\";\nimport { Fixture } from \"../types\";\nimport PlaceBet from \"./transactionComponents/PlaceBet\";\n\ninterface PlaceBetModalProps {\n  show: boolean;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  fixture: Fixture;\n  refreshBets: () => void;\n}\n\nconst PlaceBetModal: FC<PlaceBetModalProps> = (props) => {\n  const { show, setShow, fixture, refreshBets } = props;\n  const { fixId, home, away, date } = fixture;\n\n  function fixtureDetails() {\n    return (\n      <Box width='medium' margin={{ bottom: \"medium\" }} justify='center'>\n        <NameValueList>\n          <NameValuePair name='Home team'>\n            <Text color='text-strong'>{home}</Text>\n          </NameValuePair>\n          <NameValuePair name='Away team'>\n            <Text color='text-strong'>{away}</Text>\n          </NameValuePair>\n          <NameValuePair name='Date'>\n            <Text color='text-strong'>{date}</Text>\n          </NameValuePair>\n        </NameValueList>\n      </Box>\n    );\n  }\n\n  return (\n    <Box background={{ dark: false }}>\n      {show && (\n        <Layer\n          onEsc={() => setShow(false)}\n          onClickOutside={() => setShow(false)}\n          style={modalStyling}\n          position='top'\n          margin='none'\n          animation='fadeIn'\n        >\n          <h3 style={titleStyling}>Place bet</h3>\n          {fixtureDetails()}\n          <PlaceBet\n            home={home}\n            away={away}\n            fixtureID={fixId}\n            setShow={setShow}\n            refreshBets={refreshBets}\n          />\n        </Layer>\n      )}\n    </Box>\n  );\n};\n\nconst titleStyling: React.CSSProperties = {\n  color: COLORS.purple,\n  marginBottom: \"20px\",\n};\n\nconst modalStyling: React.CSSProperties = {\n  padding: BOX.padding,\n  borderRadius: BOX.borderRadius,\n  marginTop: \"10%\",\n};\n\nexport default PlaceBetModal;\n","import React, { FC, useState } from \"react\";\nimport { Button } from \"grommet\";\nimport { Fixture } from \"../types\";\nimport PlaceBetModal from \"./PlaceBetModal\";\n\ninterface FixtureControlProps {\n  fixture: Fixture;\n  refreshBets: () => void;\n}\n\nconst FixtureControls: FC<FixtureControlProps> = (props) => {\n  const { fixture, refreshBets } = props;\n  const [showModal, setShowModal] = useState(false);\n\n  function getLabel(): string {\n    if (fixture.active) {\n      return \"Place bet\";\n    }\n    if (fixture.invalidated) {\n      return \"Invalidated\";\n    }\n    if (!fixture.active) {\n      return `${fixture.winner} won`;\n    }\n\n    return \"Error\";\n  }\n\n  return (\n    <>\n      <Button\n        primary\n        label={getLabel()}\n        disabled={!fixture.active}\n        size='small'\n        onClick={() => setShowModal(true)}\n      />\n      {fixture.active && (\n        <PlaceBetModal\n          setShow={setShowModal}\n          show={showModal}\n          fixture={fixture}\n          refreshBets={refreshBets}\n        />\n      )}\n    </>\n  );\n};\n\nexport default FixtureControls;\n","import { BigNumber, ethers } from \"ethers\";\nimport { PLATFORM_COMISSION } from \"../../constants\";\n\nexport function calculatePotentialEarnings(\n  winBetTotal: BigNumber,\n  loseBetTotal: BigNumber,\n  betAmount: BigNumber\n): Number {\n  const winnersTotal = Number(ethers.utils.formatEther(winBetTotal));\n  const losersTotal =\n    Number(ethers.utils.formatEther(loseBetTotal)) * (1 - PLATFORM_COMISSION);\n  const bet = Number(ethers.utils.formatEther(betAmount));\n\n  return bet + (bet / winnersTotal) * losersTotal;\n}\n\nexport function greatestCommonDivisor(a: number, b: number): number {\n  return b !== 0 ? greatestCommonDivisor(b, a % b) : a;\n}\n","import { BigNumber, ethers } from \"ethers\";\nimport { Spinner, Text } from \"grommet\";\nimport React, { useContext, useEffect, useState, FC, useCallback } from \"react\";\nimport { REFRESH_RATE } from \"../../constants\";\nimport { GlobalState } from \"../../globalState\";\nimport { Bet, BettingOdds } from \"../../types\";\nimport {\n  calculatePotentialEarnings,\n  greatestCommonDivisor,\n} from \"../utils/MathUtils\";\n\ninterface GetOddsProps {\n  fixtureId: BigNumber;\n}\n\ninterface GetPotentialEarningsProps {\n  bet: Bet;\n}\n\nasync function _getBettingTotals(\n  bettingContract: ethers.Contract,\n  fixtureId: BigNumber\n) {\n  return await bettingContract.getBettingTotals(fixtureId);\n}\n\nexport const GetOdds: FC<GetOddsProps> = (props) => {\n  const { fixtureId } = props;\n  const { bettingContract } = useContext(GlobalState);\n  const [odds, setOdds] = useState<undefined | BettingOdds>(undefined);\n\n  /**\n   * This function will try to reduce the odds down to the simplest fraction.\n   *\n   * This calculation get tricky with decimals so we have floored the value\n   * of the bets first. This will mean that the odds are always under estimated.\n   */\n  function processBettingOdds(home: BigNumber, away: BigNumber): BettingOdds {\n    const _home = Math.floor(Number(ethers.utils.formatEther(home)));\n    const _away = Math.floor(Number(ethers.utils.formatEther(away)));\n\n    const gcd =\n      _home === 0 || _away === 0 ? 1 : greatestCommonDivisor(_home, _away);\n\n    return { homeBets: _home / gcd, awayBets: _away / gcd };\n  }\n\n  const getBettingOdds = useCallback(async () => {\n    let bettingTotals;\n\n    if (!bettingContract) {\n      throw new Error(\"Betting Contract not available\");\n    } else {\n      bettingTotals = await _getBettingTotals(bettingContract, fixtureId);\n    }\n\n    // Reduce ratio\n    const formattedOdds = processBettingOdds(\n      bettingTotals.home,\n      bettingTotals.away\n    );\n\n    setOdds(formattedOdds);\n  }, [bettingContract, fixtureId]);\n\n  useEffect(() => {\n    getBettingOdds();\n    // Refresh every second\n    const interval = setInterval(() => getBettingOdds(), REFRESH_RATE);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [getBettingOdds]);\n\n  if (!odds) {\n    return (\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <Spinner />\n      </div>\n    );\n  } else {\n    return <div>{`${odds.homeBets}:${odds.awayBets}`}</div>;\n  }\n};\n\nexport const GetPotentialEarnings: FC<GetPotentialEarningsProps> = (props) => {\n  const { bet } = props;\n  const { bettingContract } = useContext(GlobalState);\n  const [earnings, setEarnings] = useState<undefined | Number>(undefined);\n\n  /**\n   * This function will try to estimate the earnings of a game\n   */\n  const estimateEarnings = useCallback(async () => {\n    // Skip estimation if payOut is known\n    if (bet.invalidated || bet.payOut.isNegative()) {\n      setEarnings(Number(ethers.utils.formatEther(bet.amount)));\n      return;\n    }\n\n    // Get betting totals\n    let bettingTotals;\n    if (!bettingContract) {\n      throw new Error(\"Betting Contract not available\");\n    } else {\n      bettingTotals = await _getBettingTotals(bettingContract, bet.fixId);\n    }\n\n    // Calculate potential earnings\n    const potetialEarnings =\n      bet.team === (await bettingContract.getFixture(Number(bet.fixId))).home\n        ? calculatePotentialEarnings(\n            bettingTotals.home,\n            bettingTotals.away,\n            bet.amount\n          )\n        : calculatePotentialEarnings(\n            bettingTotals.away,\n            bettingTotals.home,\n            bet.amount\n          );\n\n    setEarnings(potetialEarnings);\n  }, [bettingContract, bet]);\n\n  useEffect(() => {\n    estimateEarnings();\n    // Refresh every second\n    const interval = setInterval(() => estimateEarnings(), REFRESH_RATE);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [estimateEarnings]);\n\n  function getDisplayOptions(earnings: Number): [color: string, sign: string] {\n    if (earnings > 0) {\n      return [\"status-ok\", \"+\"];\n    } else if (earnings === 0) {\n      return [\"status-warning\", \"\"];\n    } else {\n      return [\"status-error\", \"-\"];\n    }\n  }\n\n  if (earnings === undefined) {\n    return (\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <Spinner />\n      </div>\n    );\n  } else if (bet.invalidated) {\n    return <Text color='status-disabled'>Bet invalidated</Text>;\n  } else {\n    const [color, sign] = getDisplayOptions(earnings);\n\n    return (\n      <Text color={color} weight='bold'>{`${sign}${earnings.toFixed(\n        1\n      )} ETH`}</Text>\n    );\n  }\n};\n","import {\n  Spinner,\n  Table,\n  TableBody,\n  TableCell,\n  TableHeader,\n  TableRow,\n} from \"grommet\";\nimport React, { FC, useContext, useEffect, useState } from \"react\";\nimport { useCallback } from \"react\";\nimport { REFRESH_RATE } from \"../../constants\";\nimport { GlobalState } from \"../../globalState\";\nimport { Fixture } from \"../../types\";\nimport AdminFixtureControls from \"../AdminFixtureControls\";\nimport FixtureControls from \"../FixtureControls\";\nimport { GetOdds } from \"./GetBettingTotals\";\n\ninterface GetFixturesProps {\n  admin?: boolean;\n  refreshBets?: () => void;\n}\n\nconst GetFixtures: FC<GetFixturesProps> = (props) => {\n  const { admin, refreshBets } = props;\n  const { bettingContract } = useContext(GlobalState);\n  const [fixtures, setFixtures] = useState<null | any[]>(null);\n\n  const _getFixtures = useCallback(async () => {\n    if (!bettingContract) {\n      throw new Error(\"Betting Contract not available\");\n    } else {\n      let fixtureList = [];\n      const fixtureCount = await bettingContract.getFixtureCount();\n\n      for (let i = 0; i < fixtureCount; i++) {\n        fixtureList.push(await bettingContract.getFixture(i));\n      }\n\n      setFixtures(fixtureList);\n    }\n  }, [bettingContract]);\n\n  useEffect(() => {\n    // Refresh every second\n    _getFixtures();\n    const interval = setInterval(() => _getFixtures(), REFRESH_RATE);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [_getFixtures]);\n\n  function tableData() {\n    const fixtureData = fixtures?.map((fixture: Fixture) => {\n      const { fixId, home, away, date } = fixture;\n      return (\n        <TableRow key={fixId.toString()}>\n          <TableCell>{home}</TableCell>\n          <TableCell align='center'>{away}</TableCell>\n          <TableCell align='center'>{date}</TableCell>\n          <TableCell align='center'>\n            <GetOdds fixtureId={fixId} />\n          </TableCell>\n          {!admin && refreshBets && (\n            <TableCell align='center'>\n              <FixtureControls fixture={fixture} refreshBets={refreshBets} />\n            </TableCell>\n          )}\n          {admin && (\n            <TableCell align='center'>\n              <AdminFixtureControls\n                fixture={fixture}\n                refreshFixtureData={_getFixtures}\n              />\n            </TableCell>\n          )}\n        </TableRow>\n      );\n    });\n\n    return <TableBody>{fixtureData}</TableBody>;\n  }\n\n  function tableHeader() {\n    let columns = [\"Home\", \"Away\", \"Date\", \"Odds\"];\n    if (!admin) {\n      columns.push(\"Bet\");\n    }\n    if (admin) {\n      columns.push(\"Controls\");\n    }\n\n    const tableCells = columns.map((columnTitle) => {\n      const align = columnTitle === columns[0] ? \"left\" : \"center\";\n\n      return (\n        <TableCell scope='col' border='bottom' key={columnTitle} align={align}>\n          {columnTitle}\n        </TableCell>\n      );\n    });\n\n    return (\n      <TableHeader>\n        <TableRow>{tableCells}</TableRow>\n      </TableHeader>\n    );\n  }\n\n  function table() {\n    return (\n      <Table>\n        {tableHeader()}\n        {tableData()}\n      </Table>\n    );\n  }\n\n  if (fixtures === null) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Spinner size='xlarge' />\n      </div>\n    );\n  }\n  return (\n    <div>\n      {fixtures.length === 0 ? \"There are currently no fixtures\" : table()}\n    </div>\n  );\n};\n\nexport default GetFixtures;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\nimport { REFRESH_RATE } from \"../../constants\";\nimport { GlobalState } from \"../../globalState\";\nimport { Bet } from \"../../types\";\n\ntype BetsHook = [bets: Bet[] | null, refresh: () => void];\n\n// Returns a hook that returns bets and refresh function\nconst GetBets = (): BetsHook => {\n  const { bettingContract } = useContext(GlobalState);\n  const [userBets, setUserBets] = useState<any[] | null>(null);\n\n  const _getUserBets = useCallback(async () => {\n    if (!bettingContract) {\n      throw new Error(\"Betting Contract not available\");\n    } else {\n      let userBets = [];\n      const userBetIds = await bettingContract.getUserBets();\n\n      for (let i = 0; i < userBetIds.length; i++) {\n        userBets.push(await bettingContract.getBet(userBetIds[i]));\n      }\n\n      setUserBets(userBets);\n    }\n  }, [bettingContract]);\n\n  useEffect(() => {\n    // Refresh every second\n    _getUserBets();\n    const interval = setInterval(() => _getUserBets(), REFRESH_RATE);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [_getUserBets]);\n\n  return [userBets, _getUserBets];\n};\n\nexport default GetBets;\n","import React, { FC, useContext, useState } from \"react\";\nimport { Button } from \"grommet\";\nimport { Bet } from \"../../types\";\nimport { BigNumber } from \"ethers\";\nimport { GlobalState } from \"../../globalState\";\nimport { ERROR_CODE_TX_REJECTED_BY_USER } from \"../../constants\";\n\ninterface RetrieveFundsProps {\n  bet: Bet;\n  refreshBets: () => void;\n}\n\n/**\n * NOTE: Caller must have filtered out payedOut bets\n */\nconst RetrieveFunds: FC<RetrieveFundsProps> = (props) => {\n  const { bet, refreshBets } = props;\n  const { payOut, betId, invalidated } = bet;\n  const [error, setError] = useState<null | Error>(null);\n  const [status, setStatus] = useState(\"doing nothing\");\n  const { setTransactionError, bettingContract, setTxBeingSet } =\n    useContext(GlobalState);\n\n  const _retrieveFunds = async (betID: BigNumber) => {\n    try {\n      setTransactionError(undefined);\n\n      if (!bettingContract) {\n        throw new Error(\"Betting Contract not available\");\n      }\n\n      const tx = await bettingContract.retrieveFunds(betID);\n      setTxBeingSet(tx.hash);\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error: any) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(\"Caught error setting fixutre as invalidated \", error);\n      setTransactionError(error);\n    } finally {\n      setTxBeingSet(undefined);\n    }\n  };\n\n  function getLabel(): string {\n    if (invalidated) {\n      return \"Claim Refund\";\n    }\n    if (payOut.gt(0)) {\n      return \"Claim Winnings\";\n    }\n    if (payOut.isZero()) {\n      return \"In Progress\";\n    }\n\n    return \"Error\";\n  }\n\n  async function claimWinnings(e: any) {\n    e.preventDefault();\n    setStatus(\"claiming\");\n    try {\n      await _retrieveFunds(betId);\n      refreshBets();\n    } catch (err) {\n      setStatus(\"error\");\n      if (err instanceof Error) {\n        setError(err);\n        console.error(error);\n      }\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        primary\n        label={status !== \"claiming\" ? getLabel() : \"Claiming...\"}\n        disabled={payOut.isZero() || status === \"claiming\"}\n        size='small'\n        onClick={claimWinnings}\n      />\n    </div>\n  );\n};\n\nexport default RetrieveFunds;\n","import { ethers } from \"ethers\";\nimport {\n  Spinner,\n  Table,\n  TableBody,\n  TableCell,\n  TableHeader,\n  TableRow,\n} from \"grommet\";\nimport React, { FC } from \"react\";\nimport { Bet } from \"../types\";\nimport RetrieveFunds from \"./transactionComponents/RetrieveFunds\";\nimport { GetPotentialEarnings } from \"./viewComponents/GetBettingTotals\";\n\ninterface ActiveBetsProps {\n  userBets: Bet[] | null;\n  refreshBets: () => void;\n}\n\nconst ActiveBets: FC<ActiveBetsProps> = (props) => {\n  const { userBets, refreshBets } = props;\n\n  const filteredActiveBets = userBets?.filter((bet) => !bet.payedOut);\n\n  function tableData() {\n    const betData = filteredActiveBets?.map((bet: Bet) => {\n      const { betId, team, amount } = bet;\n\n      const formattedAmount = ethers.utils.formatEther(amount);\n\n      return (\n        <TableRow key={betId.toString()}>\n          <TableCell>{team}</TableCell>\n          <TableCell align='center'>{formattedAmount}</TableCell>\n          <TableCell align='center'>\n            <GetPotentialEarnings bet={bet} />\n          </TableCell>\n          <TableCell align='center'>\n            <RetrieveFunds bet={bet} refreshBets={refreshBets} />\n          </TableCell>\n        </TableRow>\n      );\n    });\n\n    return <TableBody>{betData}</TableBody>;\n  }\n\n  function tableHeader() {\n    let columns = [\"Team\", \"Amount\", \"Potential Earnings\", \"Result\"];\n\n    const tableCells = columns.map((columnTitle) => {\n      const align = columnTitle === columns[0] ? \"left\" : \"center\";\n\n      return (\n        <TableCell scope='col' border='bottom' key={columnTitle} align={align}>\n          {columnTitle}\n        </TableCell>\n      );\n    });\n\n    return (\n      <TableHeader>\n        <TableRow>{tableCells}</TableRow>\n      </TableHeader>\n    );\n  }\n\n  function table() {\n    return (\n      <Table>\n        {tableHeader()}\n        {tableData()}\n      </Table>\n    );\n  }\n\n  if (userBets === null) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Spinner size='xlarge' />\n      </div>\n    );\n  }\n  return (\n    <div style={{ marginBottom: \"15px\" }}>\n      {filteredActiveBets?.length === 0\n        ? \"You don't have any active bets\"\n        : table()}\n    </div>\n  );\n};\n\nexport default ActiveBets;\n","import { BigNumber, ethers } from \"ethers\";\nimport {\n  Spinner,\n  Table,\n  TableBody,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Text,\n} from \"grommet\";\nimport { Checkmark, Clear, Close } from \"grommet-icons\";\nimport React, { FC } from \"react\";\nimport { Bet } from \"../types\";\n\ninterface InactiveBetsProps {\n  userBets: Bet[] | null;\n}\n\nconst InactiveBets: FC<InactiveBetsProps> = (props) => {\n  const { userBets } = props;\n\n  const inactiveBets = userBets?.filter((bet) => bet.payedOut);\n\n  function betStatus(won: boolean, invalidated: boolean) {\n    if (won && !invalidated) {\n      return <Checkmark color='status-ok' />;\n    } else if (invalidated) {\n      return <Clear color='status-warning' />;\n    } else {\n      return <Close color='status-error' />;\n    }\n  }\n\n  function getPayOut(won: boolean, invalidated: boolean, payOut: BigNumber) {\n    const formattedPayOut = Number(ethers.utils.formatEther(payOut)).toFixed(1);\n\n    if (won && !invalidated) {\n      return (\n        <Text\n          color='status-ok'\n          weight='bold'\n        >{`+${formattedPayOut} ETH Won`}</Text>\n      );\n    } else if (invalidated) {\n      return (\n        <Text color='status-warning' weight='bold'>\n          Invalidated\n        </Text>\n      );\n    } else {\n      return (\n        <Text\n          color='status-error'\n          weight='bold'\n        >{`${formattedPayOut} ETH Lost`}</Text>\n      );\n    }\n  }\n\n  function tableData() {\n    const betData = inactiveBets?.map((bet: Bet) => {\n      const { betId, team, amount, invalidated, payOut } = bet;\n\n      const won = !invalidated && payOut.gt(0) ? true : false;\n      const formattedAmount = ethers.utils.formatEther(amount);\n\n      return (\n        <TableRow key={betId.toString()}>\n          <TableCell>{team}</TableCell>\n          <TableCell style={{ alignItems: \"center\" }}>\n            {betStatus(won, invalidated)}\n          </TableCell>\n          <TableCell align='center'>{formattedAmount}</TableCell>\n          <TableCell align='center'>\n            {getPayOut(won, invalidated, payOut)}\n          </TableCell>\n        </TableRow>\n      );\n    });\n\n    return <TableBody>{betData}</TableBody>;\n  }\n\n  function tableHeader() {\n    let columns = [\"Team\", \"Result\", \"Amount\", \"Payout\"];\n\n    const tableCells = columns.map((columnTitle) => {\n      const align = columnTitle === columns[0] ? \"left\" : \"center\";\n\n      return (\n        <TableCell scope='col' border='bottom' key={columnTitle} align={align}>\n          {columnTitle}\n        </TableCell>\n      );\n    });\n\n    return (\n      <TableHeader>\n        <TableRow>{tableCells}</TableRow>\n      </TableHeader>\n    );\n  }\n\n  function table() {\n    return (\n      <Table>\n        {tableHeader()}\n        {tableData()}\n      </Table>\n    );\n  }\n\n  if (userBets === null) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Spinner size='xlarge' />\n      </div>\n    );\n  }\n  return (\n    <div style={{ marginBottom: \"15px\" }}>\n      {inactiveBets?.length === 0\n        ? \"You don't have any completed bets\"\n        : table()}\n    </div>\n  );\n};\n\nexport default InactiveBets;\n","import React, { FC } from \"react\";\nimport { COLORS, BOX, DASH } from \"../theme\";\nimport GetFixtures from \"./viewComponents/GetFixtures\";\nimport { Box, Distribution, Heading } from \"grommet\";\nimport GetBets from \"./viewComponents/GetBets\";\nimport ActiveBets from \"./ActiveBets\";\nimport InactiveBets from \"./InactiveBets\";\n\nconst UQBetDashboard: FC = () => {\n  const [userBets, refreshBets] = GetBets();\n\n  return (\n    <div style={betSlipStyling}>\n      <Heading margin={{ bottom: \"medium\" }} level='2'>\n        Welcome to your dashboard.\n      </Heading>\n      <Distribution\n        values={[\n          { value: 50, color: \"brand\" },\n          { value: 30, color: COLORS.lightPurple },\n          { value: 20, color: \"light-2\" },\n        ]}\n        style={{\n          minHeight: \"600px\",\n          overflow: \"visible\",\n        }}\n      >\n        {(value) => (\n          <Box\n            pad='medium'\n            style={{\n              borderRadius: BOX.borderRadius,\n            }}\n            background={value.color}\n            fill={true}\n            overflow='scroll'\n          >\n            {value.value === 50 && (\n              <>\n                <Heading margin={{ bottom: \"small\" }} level='3'>\n                  Fixtures\n                </Heading>\n                <GetFixtures refreshBets={refreshBets} />\n              </>\n            )}\n            {value.value === 30 && (\n              <>\n                <Heading margin={{ bottom: \"small\" }} level='3' color='white'>\n                  Active Bets\n                </Heading>\n                <ActiveBets userBets={userBets} refreshBets={refreshBets} />\n              </>\n            )}\n            {value.value === 20 && (\n              <>\n                <Heading margin={{ bottom: \"small\" }} level='3'>\n                  Completed Bets\n                </Heading>\n                <InactiveBets userBets={userBets} />\n              </>\n            )}\n          </Box>\n        )}\n      </Distribution>\n    </div>\n  );\n};\n\nconst betSlipStyling: React.CSSProperties = {\n  color: COLORS.purple,\n  backgroundColor: \"white\",\n  borderRadius: BOX.borderRadius,\n  padding: BOX.padding,\n  width: DASH.width,\n  minHeight: DASH.minHeight,\n  margin: \"auto\",\n};\n\nexport default UQBetDashboard;\n","import React, { FC, useContext, useState } from \"react\";\nimport { GlobalState } from \"../../globalState\";\nimport { COLORS } from \"../../theme\";\nimport { ConnectWallet } from \"../utils/ConnectWallet\";\nimport Header from \"../Header\";\nimport { NoWalletDetected } from \"../utils/NoWalletDetected\";\nimport { Navigate } from \"react-router-dom\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport TokenArtifact from \"../../contracts/BetContract.json\";\nimport contractAddress from \"../../contracts/contract-address.json\";\nimport UQBetDashboard from \"../UQBetDashboard\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n\n// This is the Hardhat Network id, you might change it in the hardhat.config.js.\n// If you are using MetaMask, be sure to change the Network id to 1337.\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nexport const HARDHAT_NETWORK_ID = \"5\";\n\nconst UQBet: FC = () => {\n  const {\n    setNetworkError,\n    selectedAddress,\n    networkError,\n    setSelectedAddress,\n    setBalance,\n    setContract,\n    resetState,\n  } = useContext(GlobalState);\n\n  let _pollDataInterval: any;\n  let _provider: Web3Provider;\n  const [_contractOwner, _setContractOwner] = useState();\n\n  /**\n   * Function defintions\n   */\n\n  // This method checks if Metamask selected network is Localhost:8545\n  function _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    setNetworkError(\"Please connect Metamask to Ropsten\");\n\n    return false;\n  }\n\n  async function _initializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    _provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // Then, we initialize the contract using that provider and the token's\n    // artifact.\n    let contract = new ethers.Contract(\n      contractAddress.Token,\n      TokenArtifact.abi,\n      _provider.getSigner(0)\n    );\n\n    setContract(contract);\n    _setContractOwner((await contract.owner()).toLowerCase());\n  }\n\n  async function _updateEthBalance(userAddress: string) {\n    const balance = ethers.utils.formatEther(\n      await _provider.getBalance(userAddress)\n    );\n\n    // Limit to two decimal places\n    setBalance(Number(balance).toFixed(2));\n  }\n\n  // The next two methods are needed to start and stop polling data.\n  function _startPollingData(userAddress: string) {\n    _pollDataInterval = setInterval(() => _updateEthBalance(userAddress), 1000);\n\n    // We run it once immediately so we don't have to wait for it\n    _updateEthBalance(userAddress);\n  }\n\n  function _stopPollingData() {\n    clearInterval(_pollDataInterval);\n    _pollDataInterval = undefined;\n  }\n\n  function _initialize(userAddress: string) {\n    // First we initialize ethers\n    _initializeEthers();\n\n    // Then we store the user's address in the component's state\n    setSelectedAddress(userAddress);\n\n    // Start polling the users eth balance\n    _startPollingData(userAddress);\n  }\n\n  // This method just clears part of the state.\n  function _dismissNetworkError() {\n    setNetworkError(undefined);\n  }\n\n  // This method is run when the user clicks the Connect. It connects the\n  // dapp to the user's wallet, and initializes it.\n  async function _connectWallet() {\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [accountAddy] = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!_checkNetwork()) {\n      return;\n    }\n\n    _initialize(accountAddy);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", (newAddress: any) => {\n      _stopPollingData();\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state\n      if (resetState) {\n        resetState();\n      }\n\n      document.location.replace(\"/\");\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on(\"chainChanged\", () => {\n      _stopPollingData();\n      if (resetState) {\n        return resetState();\n      }\n    });\n  }\n\n  /**\n   * Return statements\n   */\n\n  document.body.style.backgroundColor = COLORS.purple;\n\n  // Ethereum wallets inject the window.ethereum object. If it hasn't been\n  // injected, we instruct the user to install MetaMask.\n  if (window.ethereum === undefined) {\n    return <NoWalletDetected />;\n  }\n\n  // The next thing we need to do, is to ask the user to connect their wallet.\n  // When the wallet gets connected, we are going to save the users's address\n  // in the component's state. So, if it hasn't been saved yet, we have\n  // to show the ConnectWallet component.\n  //\n  // Note that we pass it a callback that is going to be called when the user\n  // clicks a button. This callback just calls the _connectWallet method.\n  if (!selectedAddress) {\n    return (\n      <ConnectWallet\n        connectWallet={() => _connectWallet()}\n        networkError={networkError}\n        dismiss={() => _dismissNetworkError()}\n      />\n    );\n  }\n\n  // Connected address is owner of the contract.\n  if (selectedAddress === _contractOwner) {\n    return (\n      <>\n        <Navigate to=\"/admin\" />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Header />\n      <UQBetDashboard />\n    </>\n  );\n};\n\nexport default UQBet;\n","import React, { FC, useContext, useState } from \"react\";\nimport { GlobalState } from \"../../globalState\";\nimport { ERROR_CODE_TX_REJECTED_BY_USER } from \"../../constants\";\nimport { Box, Button, DateInput, Form, FormField, TextInput} from \"grommet\";\n\nconst AddFixture: FC = () => {\n  const { setTransactionError, bettingContract, setTxBeingSet } =\n    useContext(GlobalState);\n\n  const [awayTeam, setAwayTeam] = useState(\"\");\n  const [homeTeam, setHomeTeam] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [error, setError] = useState<null | Error>(null);\n  const [status, setStatus] = useState(\"typing\");\n\n  const _addFixture = async (home: string, away: string, date: string) => {\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      setTransactionError(undefined);\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      if (!bettingContract) {\n        throw new Error(\"Betting Contract not available\");\n      }\n      const tx = await bettingContract.addFixture(home, away, date);\n      setTxBeingSet(tx.hash);\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx.wait();\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that made the transaction fail when it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      // await this._updateBalance();\n    } catch (error: any) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(\"Caught error sending add fixture transaction: \", error);\n      setTransactionError(error);\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      setTxBeingSet(undefined);\n    }\n  };\n\n  async function handleSubmit(e: any) {\n    e.preventDefault();\n    setStatus(\"submitting\");\n    try {\n      await _addFixture(homeTeam, awayTeam, date);\n      setStatus(\"success\");\n      resetForm();\n    } catch (err) {\n      setStatus(\"typing\");\n      if (err instanceof Error) {\n        setError(err);\n      }\n    }\n  }\n\n  function isFormEmpty(): boolean {\n    if (date.length === 0 || awayTeam.length === 0 || homeTeam.length === 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function resetForm(): void {\n    setAwayTeam(\"\");\n    setHomeTeam(\"\");\n    setDate(\"\");\n  }\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit} onReset={resetForm}>\n        <FormField label='Home team' type='text'>\n          <TextInput\n            placeholder='Home team'\n            value={homeTeam}\n            onChange={(e) => setHomeTeam(e.target.value)}\n          />\n        </FormField>\n        <FormField label='Away team' type='text'>\n          <TextInput\n            placeholder='Away team'\n            value={awayTeam}\n            onChange={(e) => setAwayTeam(e.target.value)}\n          />\n        </FormField>\n        <FormField label='Date' type='date'>\n          <DateInput\n            format='dd/mm/yyyy'\n            value={date}\n            onChange={({ value }) =>\n              setDate(new Date(value.toString()).toLocaleDateString())\n            }\n          />\n        </FormField>\n        <Box direction='row' gap='medium' margin={{ top: \"medium\" }}>\n          <Button\n            type='submit'\n            primary\n            label='Submit'\n            disabled={isFormEmpty() || status === \"submitting\"}\n          />\n          <Button type='reset' label='Reset' />\n        </Box>\n        {error !== null && <p className='Error'>{error.message}</p>}\n      </Form>\n    </>\n  );\n};\n\nexport default AddFixture;","import React, { FC } from \"react\";\nimport { Button } from \"grommet\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FormPrevious } from \"grommet-icons\";\n\ninterface BackButtonProps {\n  style?: React.CSSProperties;\n}\n\nconst BackButton: FC<BackButtonProps> = (props) => {\n  const { style } = props;\n  const navigate = useNavigate();\n\n  return (\n    <>\n      <Button style={style} onClick={() => navigate(-1)}>\n        <FormPrevious color={\"brand\"} size='35' />\n      </Button>\n    </>\n  );\n};\n\nexport default BackButton;\n","import React, { FC } from \"react\";\nimport { BOX, COLORS, DASH } from \"../../../theme\";\nimport Header from \"../../Header\";\nimport AddFixture from \"../../transactionComponents/AddFixture\";\nimport BackButton from \"../../utils/BackButton\";\n\nconst AddFixturePage: FC = () => {\n  document.body.style.backgroundColor = COLORS.purple;\n\n  return (\n    <>\n      <Header />\n      <div style={addFixturePageStyle}>\n        <div style={headerStyle}>\n          <BackButton\n            style={{\n              position: \"absolute\",\n              justifySelf: \"center\",\n            }}\n          />\n          <h2\n            style={{\n              textAlign: \"center\",\n              justifySelf: \"center\",\n              flexGrow: 1,\n            }}\n          >\n            Add fixture\n          </h2>\n        </div>\n        <AddFixture />\n      </div>\n    </>\n  );\n};\n\nconst addFixturePageStyle: React.CSSProperties = {\n  color: COLORS.purple,\n  backgroundColor: \"white\",\n  borderRadius: BOX.borderRadius,\n  padding: BOX.padding,\n  width: DASH.width,\n  minHeight: DASH.minHeight,\n  margin: \"auto\",\n};\n\nconst headerStyle: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  marginBottom: \"30px\",\n};\n\nexport default AddFixturePage;\n","import React, { FC, useContext, useState } from \"react\";\nimport { Button } from \"grommet\";\nimport { GlobalState } from \"../../globalState\";\nimport { ERROR_CODE_TX_REJECTED_BY_USER } from \"../../constants\";\n\ninterface TakeEarningsProps {\n  style?: React.CSSProperties;\n}\n\nconst TakeEarnings: FC<TakeEarningsProps> = (props) => {\n  const { setTransactionError, bettingContract, setTxBeingSet } =\n    useContext(GlobalState);\n  const { style } = props;\n  const [error, setError] = useState<null | Error>(null);\n  const [status, setStatus] = useState(\"typing\");\n\n  const _drainContract = async () => {\n    try {\n      setTransactionError(undefined);\n\n      if (!bettingContract) {\n        throw new Error(\"Betting Contract not available\");\n      }\n\n      const tx = await bettingContract.takeEarnings();\n      setTxBeingSet(tx.hash);\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error: any) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(\"Caught error trying to take earnings \", error);\n      setTransactionError(error);\n    } finally {\n      setTxBeingSet(undefined);\n    }\n  };\n\n  async function takeEarnings(e: any) {\n    e.preventDefault();\n    setStatus(\"draining...\");\n    try {\n      await _drainContract();\n      setStatus(\"success\");\n    } catch (err) {\n      setStatus(\"error\");\n      if (err instanceof Error) {\n        setError(err);\n        console.error(status);\n        console.error(error);\n      }\n    }\n  }\n\n  return (\n    <Button\n      primary\n      label=\"Take Earnings\"\n      style={style}\n      onClick={takeEarnings}\n    />\n  );\n};\n\nexport default TakeEarnings;\n","import { Button } from \"grommet\";\nimport React, { FC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { BOX, COLORS, DASH } from \"../theme\";\nimport GetFixtures from \"./viewComponents/GetFixtures\";\nimport TakeEarnings from \"./utils/TakeEarnings\";\n\nconst AdminDashboard: FC = () => {\n  return (\n    <div style={adminDashboardStyle}>\n      <div style={dashboardHeaderStyle}>\n        <h2>Welcome to the Admin Dashboard!</h2>\n        <Link to='/admin/AddFixture'>\n          <Button primary label='Add Fixture' />\n        </Link>\n      </div>\n      <TakeEarnings style={{float: \"right\"}} />\n      <br />\n      <GetFixtures admin />\n    </div>\n  );\n};\n\nconst adminDashboardStyle: React.CSSProperties = {\n  color: COLORS.purple,\n  backgroundColor: \"white\",\n  borderRadius: BOX.borderRadius,\n  padding: BOX.padding,\n  width: DASH.width,\n  minHeight: DASH.minHeight,\n  margin: \"auto\",\n};\n\nconst dashboardHeaderStyle: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  justifyContent: \"space-between\",\n};\n\nexport default AdminDashboard;\n","import React, { FC } from \"react\";\nimport { COLORS } from \"../../../theme\";\nimport AdminDashboard from \"../../AdminDashboard\";\nimport Header from \"../../Header\";\n\nconst AdminPage: FC = () => {\n  document.body.style.backgroundColor = COLORS.purple;\n\n  return (\n    <>\n      <Header />\n      <AdminDashboard />\n    </>\n  );\n};\n\nexport default AdminPage;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport UQBet from \"./components/pages/UQBet\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\n// We import bootstrap here, but you can remove if you want\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { GlobalStateProvider } from \"./globalState\";\nimport AddFixturePage from \"./components/pages/admin/AddFixturePage\";\nimport { Grommet } from \"grommet\";\nimport { theme } from \"./theme\";\nimport AdminPage from \"./components/pages/admin/AdminPage\";\n\n// This is the entry point of your application, but it just renders the Dapp\n// react component. All of the logic is contained in it.\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Grommet theme={theme}>\n      <GlobalStateProvider>\n        <BrowserRouter>\n          <Routes>\n            <Route path='/' element={<UQBet />} />\n            <Route path='/admin' element={<AdminPage />} />\n            <Route path='/admin/AddFixture' element={<AddFixturePage />} />\n          </Routes>\n        </BrowserRouter>\n      </GlobalStateProvider>\n    </Grommet>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}