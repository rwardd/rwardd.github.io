{"version":3,"sources":["components/utils/NoWalletDetected.tsx","components/utils/NetworkErrorMessage.tsx","components/utils/ConnectWallet.tsx","components/utils/Loading.tsx","components/Transfer.js","components/utils/TransactionErrorMessage.js","components/utils/WaitingForTransactionMessage.js","components/utils/NoTokensMessage.js","components/DeprecatedDapp.js","globalState.tsx","theme.tsx","components/Header.tsx","components/transactionComponents/SetInvalidated.tsx","constants.tsx","components/transactionComponents/SetWinner.tsx","components/ConfirmResultModal.tsx","components/AdminFixtureControls.tsx","components/transactionComponents/PlaceBet.tsx","components/PlaceBetModal.tsx","components/FixtureControls.tsx","components/utils/MathUtils.tsx","components/viewComponents/GetBettingTotals.tsx","components/viewComponents/GetFixtures.tsx","components/viewComponents/GetBets.tsx","components/transactionComponents/RetrieveFunds.tsx","components/ActiveBets.tsx","components/InactiveBets.tsx","components/UQBetDashboard.tsx","components/pages/UQBet.tsx","components/transactionComponents/AddFixture.tsx","components/utils/BackButton.tsx","components/pages/admin/AddFixturePage.tsx","components/utils/TakeEarnings.tsx","components/AdminDashboard.tsx","components/pages/admin/AdminPage.tsx","index.tsx"],"names":["NoWalletDetected","className","href","target","rel","NetworkErrorMessage","props","message","dismiss","role","type","data-dismiss","aria-label","onClick","aria-hidden","ConnectWallet","connectWallet","networkError","Loading","style","position","zIndex","top","left","width","height","background","marginLeft","marginTop","textAlign","Transfer","transferTokens","tokenSymbol","onSubmit","event","preventDefault","formData","FormData","to","get","amount","step","name","placeholder","required","value","TransactionErrorMessage","substring","WaitingForTransactionMessage","txHash","NoTokensMessage","selectedAddress","Dapp","initialState","tokenData","undefined","balance","txBeingSent","transactionError","state","window","ethereum","this","symbol","toString","_getRpcErrorMessage","_dismissTransactionError","eq","gt","_transferTokens","_connectWallet","_dismissNetworkError","_stopPollingData","a","request","method","_checkNetwork","_initialize","on","newAddress","_resetState","userAddress","setState","_initializeEthers","_getTokenData","_startPollingData","_provider","ethers","providers","Web3Provider","_token","Contract","contractAddress","Token","TokenArtifact","abi","getSigner","_pollDataInterval","setInterval","_updateBalance","clearInterval","balanceOf","transfer","tx","hash","wait","status","Error","code","console","error","data","networkVersion","React","Component","GlobalState","createContext","GlobalStateProvider","children","useState","setSelectedAddress","setBalance","setTxBeingSet","setTransactionError","setNetworkError","bettingContract","setContract","resetState","Provider","COLORS","FONT_SIZE","BOX","DASH","theme","global","colors","brand","focus","border","color","tag","seperator","headerStyling","display","flexDirection","justifyContent","alignItems","marginBottom","paddingLeft","paddingRight","innerDisplay","backgroundColor","borderRadius","padding","accountDisplayStyling","borderStyle","borderWidth","borderColor","iconStyling","textStyling","Header","useContext","logo","fontSize","Button","icon","hoverIndicator","marginRight","slice","size","SetInvalidated","fixtureID","setShow","refreshFixtureData","_setInvalidated","setInvalidated","primary","label","margin","SetWinner","team","_setWinner","winner","setWinner","titleStyling","modalStyling","ConfirmResultModal","show","fixture","fixId","home","away","date","Box","Layer","onEsc","onClickOutside","animation","bottom","justify","NameValueList","NameValuePair","Text","AdmimFixtureControls","showModal","setShowModal","active","invalidated","disabled","PlaceBet","refreshBets","setAmount","setError","setStatus","_placeBet","placeBet","e","utils","parseEther","Form","onReset","FormField","Select","options","onChange","option","htmlFor","TextInput","Number","direction","gap","PlaceBetModal","dark","FixtureControls","calculatePotentialEarnings","winBetTotal","loseBetTotal","betAmount","winnersTotal","formatEther","losersTotal","bet","_getBettingTotals","fixtureId","getBettingTotals","GetOdds","odds","setOdds","processBettingOdds","_home","Math","floor","_away","gcd","greatestCommonDivisor","b","homeBets","awayBets","bettingTotals","formattedOdds","useEffect","interval","getBettingOdds","Spinner","GetPotentialEarnings","earnings","setEarnings","payOut","isNegative","getFixture","potetialEarnings","estimateEarnings","getDisplayOptions","sign","weight","toFixed","GetFixtures","admin","fixtures","setFixtures","_getFixtures","fixtureList","getFixtureCount","fixtureCount","i","push","length","Table","columns","tableCells","map","columnTitle","align","TableCell","scope","key","TableHeader","TableRow","tableHeader","fixtureData","AdminFixtureControls","TableBody","tableData","GetBets","userBets","setUserBets","_getUserBets","getUserBets","userBetIds","getBet","RetrieveFunds","betId","_retrieveFunds","betID","retrieveFunds","isZero","ActiveBets","filteredActiveBets","filter","payedOut","betData","formattedAmount","InactiveBets","inactiveBets","won","Checkmark","Clear","Close","betStatus","formattedPayOut","getPayOut","betSlipStyling","minHeight","UQBetDashboard","Heading","level","Distribution","values","overflow","pad","fill","UQBet","_contractOwner","_setContractOwner","contract","owner","toLowerCase","_updateEthBalance","getBalance","accountAddy","document","location","replace","body","AddFixture","awayTeam","setAwayTeam","homeTeam","setHomeTeam","setDate","_addFixture","addFixture","resetForm","DateInput","format","Date","toLocaleDateString","BackButton","navigate","useNavigate","FormPrevious","addFixturePageStyle","headerStyle","AddFixturePage","justifySelf","flexGrow","TakeEarnings","_drainContract","takeEarnings","adminDashboardStyle","dashboardHeaderStyle","AdminDashboard","float","AdminPage","ReactDOM","render","StrictMode","Grommet","path","element","getElementById"],"mappings":"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","file":"static/js/main.e7b68a4c.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nexport const NoWalletDetected: FC = () => {\n  return (\n    <div className='container'>\n      <div className='row justify-content-md-center'>\n        <div className='col-6 p-4 text-center'>\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{\" \"}\n            <a\n              href='http://metamask.io'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\ninterface NetworkErrorMessageProps {\n  message: any;\n  dismiss: any;\n}\n\nexport const NetworkErrorMessage: React.FC<NetworkErrorMessageProps> = (\n  props\n) => {\n  const { message, dismiss } = props;\n\n  return (\n    <div className='alert alert-danger' role='alert'>\n      {message}\n      <button\n        type='button'\n        className='close'\n        data-dismiss='alert'\n        aria-label='Close'\n        onClick={dismiss}\n      >\n        <span aria-hidden='true'>&times;</span>\n      </button>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { NetworkErrorMessage } from \"./NetworkErrorMessage\";\n\ninterface ConnectWalletProps {\n  connectWallet: any;\n  networkError: any;\n  dismiss: any;\n}\n\nexport const ConnectWallet: React.FC<ConnectWalletProps> = (props) => {\n  const { connectWallet, networkError, dismiss } = props;\n\n  return (\n    <div className='container'>\n      <div className='row justify-content-md-center'>\n        <div className='col-12 text-center'>\n          {/* Metamask network should be set to Localhost:8545. */}\n          {networkError && (\n            <NetworkErrorMessage message={networkError} dismiss={dismiss} />\n          )}\n        </div>\n        <div className='col-6 p-4 text-center'>\n          <p className='text-white'>Please connect to your wallet.</p>\n          <button\n            className='btn btn-warning'\n            type='button'\n            onClick={connectWallet}\n          >\n            Connect Wallet\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport function Loading() {\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        zIndex: 2,\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        background: \"rgba(255, 255, 255, 0.5)\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          zIndex: 3,\n          top: \"50%\",\n          left: \"50%\",\n          width: \"100px\",\n          height: \"50px\",\n          marginLeft: \"-50px\",\n          marginTop: \" -25px\",\n          textAlign: \"center\",\n        }}\n      >\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Transfer({ transferTokens, tokenSymbol }) {\n  return (\n    <div>\n      <h4>Transfer</h4>\n      <form\n        onSubmit={(event) => {\n          // This function just calls the transferTokens callback with the\n          // form's data.\n          event.preventDefault();\n\n          const formData = new FormData(event.target);\n          const to = formData.get(\"to\");\n          const amount = formData.get(\"amount\");\n\n          if (to && amount) {\n            transferTokens(to, amount);\n          }\n        }}\n      >\n        <div className=\"form-group\">\n          <label>Amount of {tokenSymbol}</label>\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            step=\"1\"\n            name=\"amount\"\n            placeholder=\"1\"\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Recipient address</label>\n          <input className=\"form-control\" type=\"text\" name=\"to\" required />\n        </div>\n        <div className=\"form-group\">\n          <input className=\"btn btn-primary\" type=\"submit\" value=\"Transfer\" />\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function TransactionErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      Error sending transaction: {message.substring(0, 100)}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function WaitingForTransactionMessage({ txHash }) {\n  return (\n    <div className=\"alert alert-info\" role=\"alert\">\n      Waiting for transaction <strong>{txHash}</strong> to be mined\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function NoTokensMessage({ selectedAddress }) {\n  return (\n    <>\n      <p>You don't have tokens to transfer</p>\n      <p>\n        To get some tokens, open a terminal in the root of the repository and run: \n        <br />\n        <br />\n        <code>npx hardhat --network localhost faucet {selectedAddress}</code>\n      </p>\n    </>\n  );\n}\n","import React from \"react\";\n\n// General front end imports\nimport { Link } from \"react-router-dom\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport TokenArtifact from \"../contracts/BetContract.json\";\nimport contractAddress from \"../contracts/contract-address.json\";\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { NoWalletDetected } from \"./utils/NoWalletDetected\";\nimport { ConnectWallet } from \"./utils/ConnectWallet\";\nimport { Loading } from \"./utils/Loading\";\nimport { Transfer } from \"./Transfer\";\nimport { TransactionErrorMessage } from \"./utils/TransactionErrorMessage\";\nimport { WaitingForTransactionMessage } from \"./utils/WaitingForTransactionMessage\";\nimport { NoTokensMessage } from \"./utils/NoTokensMessage\";\n\n// This is the Hardhat Network id, you might change it in the hardhat.config.js.\n// If you are using MetaMask, be sure to change the Network id to 1337.\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst HARDHAT_NETWORK_ID = \"1337\";\n\n// This is an error code that indicates that the user canceled a transaction\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\n// This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n    };\n\n    this.state = this.initialState;\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n    // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the ConnectWallet component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n    if (!this.state.selectedAddress) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this._connectWallet()}\n          networkError={this.state.networkError}\n          dismiss={() => this._dismissNetworkError()}\n        />\n      );\n    }\n\n    // If the token data or the user's balance hasn't loaded yet, we show\n    // a loading component.\n    if (!this.state.tokenData || !this.state.balance) {\n      return <Loading />;\n    }\n\n    // If everything is loaded, we render the application.\n    return (\n      <div className='container p-4'>\n        <div className='row'>\n          <div className='col-12'>\n            <h1>\n              {this.state.tokenData.name} ({this.state.tokenData.symbol})\n            </h1>\n            <p>\n              Welcome <b>{this.state.selectedAddress}</b>, you have{\" \"}\n              <b>\n                {this.state.balance.toString()} {this.state.tokenData.symbol}\n              </b>\n              .\n            </p>\n          </div>\n        </div>\n        <hr />\n        <div className='row'>\n          <div className='col-12'>\n            {/* \n\t\t\t  Sending a transaction isn't an immediate action. You have to wait\n\t\t\t  for it to be mined.\n\t\t\t  If we are waiting for one, we show a message here.\n\t\t\t*/}\n            {this.state.txBeingSent && (\n              <WaitingForTransactionMessage txHash={this.state.txBeingSent} />\n            )}\n\n            {/* \n\t\t\t  Sending a transaction can fail in multiple ways. \n\t\t\t  If that happened, we show a message here.\n\t\t\t*/}\n            {this.state.transactionError && (\n              <TransactionErrorMessage\n                message={this._getRpcErrorMessage(this.state.transactionError)}\n                dismiss={() => this._dismissTransactionError()}\n              />\n            )}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-12'>\n            {/*\n\t\t\t  If the user has no tokens, we don't show the Transfer form\n\t\t\t*/}\n            {this.state.balance.eq(0) && (\n              <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n            )}\n\n            {/*\n\t\t\t  This component displays a form that the user can use to send a \n\t\t\t  transaction and transfer some tokens.\n\t\t\t  The component doesn't have logic, it just calls the transferTokens\n\t\t\t  callback.\n\t\t\t*/}\n            {this.state.balance.gt(0) && (\n              <Transfer\n                transferTokens={(to, amount) =>\n                  this._transferTokens(to, amount)\n                }\n                tokenSymbol={this.state.tokenData.symbol}\n              />\n            )}\n          </div>\n        </div>\n        <div className='button'>\n          <h2>\n            {\" \"}\n            <Link to='/UQBet'>UQBet</Link>\n          </h2>\n        </div>\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n\n    const [selectedAddress] = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on(\"chainChanged\", ([networkId]) => {\n      this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress,\n    });\n\n    // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n    this._initializeEthers();\n    this._getTokenData();\n    this._startPollingData();\n  }\n\n  async _initializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // Then, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n    this._token = new ethers.Contract(\n      contractAddress.Token,\n      TokenArtifact.abi,\n      this._provider.getSigner(0)\n    );\n  }\n\n  // The next two methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000);\n\n    // We run it once immediately so we don't have to wait for it\n    this._updateBalance();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  // The next two methods just read from the contract and store the results\n  // in the component state.\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n\n    this.setState({ tokenData: { name, symbol } });\n  }\n\n  async _updateBalance() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({ balance });\n  }\n\n  // This method sends an ethereum transaction to transfer tokens.\n  // While this action is specific to this application, it illustrates how to\n  // send a transaction.\n  async _transferTokens(to, amount) {\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError();\n\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      const tx = await this._token.transfer(to, amount);\n      this.setState({ txBeingSent: tx.hash });\n\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx.wait();\n\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that made the transaction fail when it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      await this._updateBalance();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  // This method just clears part of the state.\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  // This method just clears part of the state.\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  // This is an utility method that turns an RPC error into a human readable\n  // message.\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  // This method resets the state\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545 \n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: \"Please connect Metamask to Localhost:8545\",\n    });\n\n    return false;\n  }\n}\n","import { ethers } from \"ethers\";\nimport React, { ReactNode, useState } from \"react\";\n\n// This is our global state\n\nexport const GlobalState = React.createContext<Partial<IGlobalState>>({});\n\nexport interface IGlobalState {\n  // The user's address\n  selectedAddress: string | undefined;\n  setSelectedAddress: any;\n  // The user's ethereum balance\n  balance: any;\n  setBalance: any;\n  // The ID about transactions being sent\n  txBeingSent: any;\n  setTxBeingSet: any;\n  // Any possible transaction error\n  transactionError: any;\n  setTransactionError: any;\n  // Any network error\n  networkError: any;\n  setNetworkError: any;\n  // The betting Contract\n  bettingContract: ethers.Contract | undefined;\n  setContract: any;\n  // Function to reset state\n  resetState: () => void;\n}\n\ninterface GlobalStateProviderProps {\n  children: ReactNode;\n}\n\nexport const GlobalStateProvider: React.FC<GlobalStateProviderProps> = (\n  props\n) => {\n  const { children } = props;\n\n  const [selectedAddress, setSelectedAddress] = useState(undefined);\n  const [balance, setBalance] = useState(undefined);\n  const [txBeingSent, setTxBeingSet] = useState(undefined);\n  const [transactionError, setTransactionError] = useState(undefined);\n  const [networkError, setNetworkError] = useState(undefined);\n  const [bettingContract, setContract] = useState(undefined);\n\n  function resetState() {\n    setSelectedAddress(undefined);\n    setBalance(undefined);\n    setTxBeingSet(undefined);\n    setTransactionError(undefined);\n    setNetworkError(undefined);\n    setContract(undefined);\n  }\n\n  const initialState: IGlobalState = {\n    selectedAddress,\n    setSelectedAddress,\n    balance,\n    setBalance,\n    txBeingSent,\n    setTxBeingSet,\n    transactionError,\n    setTransactionError,\n    networkError,\n    setNetworkError,\n    bettingContract,\n    setContract,\n    resetState,\n  };\n\n  return (\n    <GlobalState.Provider value={initialState}>{children}</GlobalState.Provider>\n  );\n};\n","export const COLORS = {\n  purple: \"#65388E\",\n  lightPurple: \"#7c46aa\",\n  darkPurple: \"#4A1F73\",\n  white: \"#FFFFFF\",\n  green: \"#00C781\",\n};\n\nexport const FONT_SIZE = {\n  title: 70,\n  four: 18,\n};\n\nexport const BOX = {\n  borderRadius: 20,\n  padding: 40,\n};\n\nexport const DASH = {\n  width: \"1200px\",\n  minHeight: \"650px\",\n};\n\nexport const theme = {\n  global: {\n    colors: {\n      brand: COLORS.purple,\n      \"accent-1\": COLORS.green,\n    },\n    focus: {\n      border: {\n        color: COLORS.green,\n      },\n    },\n    tag: {\n      seperator: \"\",\n    },\n  },\n};","import { Button } from \"grommet\";\nimport { Header as GrommetHeader } from \"grommet\";\nimport React, { FC, useContext } from \"react\";\nimport { GlobalState } from \"../globalState\";\nimport { COLORS, FONT_SIZE } from \"../theme\";\nimport { Loading } from \"./utils/Loading\";\nimport { FaEthereum } from \"react-icons/fa\";\n\nconst Header: FC = () => {\n  const { balance, selectedAddress } = useContext(GlobalState);\n\n  const logo = (\n    <h1\n      style={{\n        fontSize: FONT_SIZE.title,\n      }}\n    >\n      UQBet\n    </h1>\n  );\n\n  const accountDisplay = () => {\n    if (!balance) {\n      return <Loading />;\n    } else {\n      return (\n        <div style={accountDisplayStyling}>\n          <h5\n            style={{ ...textStyling, marginRight: \"10px\" }}\n          >{`${balance} ETH`}</h5>\n          <div style={innerDisplay}>\n            <h5\n              style={{\n                ...textStyling,\n                marginRight: \"10px\",\n                marginLeft: \"8px\",\n              }}\n            >{`${selectedAddress?.slice(0, 5)}...${selectedAddress?.slice(\n              -5,\n              -1\n            )}`}</h5>\n            <FaEthereum style={iconStyling} size='35px' />\n          </div>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div style={headerStyling}>\n      <GrommetHeader background='brand'>\n        <Button icon={logo} hoverIndicator />\n      </GrommetHeader>\n      {accountDisplay()}\n    </div>\n  );\n};\n\nconst headerStyling: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  color: COLORS.white,\n  marginTop: \"10px\",\n  marginBottom: \"10px\",\n  paddingLeft: \"12px\",\n  paddingRight: \"45px\",\n};\n\nconst innerDisplay: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  backgroundColor: COLORS.purple,\n  color: \"white\",\n  borderRadius: 90,\n  padding: \"5px 10px\",\n};\n\nconst accountDisplayStyling: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n  justifyContent: \"space-between\",\n  color: \"white\",\n  backgroundColor: COLORS.lightPurple,\n  borderRadius: 90,\n  paddingLeft: \"12px\",\n  borderStyle: \"solid\",\n  borderWidth: \"2px\",\n  borderColor: COLORS.lightPurple,\n};\n\nconst iconStyling: React.CSSProperties = {\n  backgroundColor: \"#383838\",\n  borderRadius: 90,\n  padding: \"5px\",\n};\n\nconst textStyling: React.CSSProperties = { position: \"relative\", top: 4.5 };\n\nexport default Header;\n","import React, { FC, useContext } from \"react\";\nimport { GlobalState } from \"../../globalState\";\nimport { ERROR_CODE_TX_REJECTED_BY_USER } from \"../../constants\";\nimport { Button } from \"grommet\";\nimport { BigNumber } from \"ethers\";\n\ninterface SetInvalidatedProps {\n  fixtureID: BigNumber;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  refreshFixtureData: () => void;\n}\n\nconst SetInvalidated: FC<SetInvalidatedProps> = (props) => {\n  const { fixtureID, setShow, refreshFixtureData } = props;\n\n  const { setTransactionError, bettingContract, setTxBeingSet } =\n    useContext(GlobalState);\n\n  const _setInvalidated = async (fixtureID: BigNumber) => {\n    try {\n      setTransactionError(undefined);\n\n      if (!bettingContract) {\n        throw new Error(\"Betting Contract not available\");\n      }\n\n      const tx = await bettingContract.setInvalidated(fixtureID);\n      setTxBeingSet(tx.hash);\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error: any) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(\"Caught error setting fixutre as invalidated \", error);\n      setTransactionError(error);\n    } finally {\n      setTxBeingSet(undefined);\n      setShow(false);\n      refreshFixtureData();\n    }\n  };\n\n  return (\n    <>\n      <Button\n        primary\n        label='Set Invalidated'\n        onClick={() => _setInvalidated(fixtureID)}\n        margin='xsmall'\n      />\n    </>\n  );\n};\n\nexport default SetInvalidated;\n","// This is an error code that indicates that the user canceled a transaction\nexport const ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\n// How often to poll the data on the dashboard\nexport const REFRESH_RATE = 1000;\n\n// How much comission UQSports takes from winnings (0.1 = 10%)\nexport const PLATFORM_COMISSION = 0.1;","import React, { FC, useContext } from \"react\";\nimport { GlobalState } from \"../../globalState\";\nimport { ERROR_CODE_TX_REJECTED_BY_USER } from \"../../constants\";\nimport { Button } from \"grommet\";\nimport { BigNumber } from \"ethers\";\n\ninterface SetWinnerProps {\n  team: string;\n  fixtureID: BigNumber;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  refreshFixtureData: () => void;\n}\n\nconst SetWinner: FC<SetWinnerProps> = (props) => {\n  const { team, fixtureID, setShow, refreshFixtureData } = props;\n\n  const { setTransactionError, bettingContract, setTxBeingSet } =\n    useContext(GlobalState);\n\n  const _setWinner = async (fixtureID: BigNumber, winner: string) => {\n    try {\n      setTransactionError(undefined);\n\n      if (!bettingContract) {\n        throw new Error(\"Betting Contract not available\");\n      }\n\n      const tx = await bettingContract.setWinner(fixtureID, winner);\n      setTxBeingSet(tx.hash);\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error: any) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(\"Caught error setting winner \", error);\n      setTransactionError(error);\n    } finally {\n      setTxBeingSet(undefined);\n      setShow(false);\n      refreshFixtureData();\n    }\n  };\n\n  return (\n    <>\n      <Button\n        primary\n        label={`Set winner as ${team}`}\n        onClick={() => _setWinner(fixtureID, team)}\n        margin='xsmall'\n      />\n    </>\n  );\n};\n\nexport default SetWinner;\n","import { Box, Text, Layer, NameValueList, NameValuePair } from \"grommet\";\nimport React, { FC } from \"react\";\nimport { BOX, COLORS } from \"../theme\";\nimport { Fixture } from \"../types\";\nimport SetInvalidated from \"./transactionComponents/SetInvalidated\";\nimport SetWinner from \"./transactionComponents/SetWinner\";\n\ninterface ConfirmResultModalProps {\n  show: boolean;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  fixture: Fixture;\n  refreshFixtureData: () => void;\n}\n\nconst ConfirmResultModal: FC<ConfirmResultModalProps> = (props) => {\n  const { show, setShow, fixture, refreshFixtureData } = props;\n  const { fixId, home, away, date } = fixture;\n\n  function fixtureDetails() {\n    return (\n      <Box width='medium' margin={{ bottom: \"medium\" }} justify='center'>\n        <NameValueList>\n          <NameValuePair name='Home team'>\n            <Text color='text-strong'>{home}</Text>\n          </NameValuePair>\n          <NameValuePair name='Away team'>\n            <Text color='text-strong'>{away}</Text>\n          </NameValuePair>\n          <NameValuePair name='Date'>\n            <Text color='text-strong'>{date}</Text>\n          </NameValuePair>\n        </NameValueList>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {show && (\n        <Layer\n          onEsc={() => setShow(false)}\n          onClickOutside={() => setShow(false)}\n          style={modalStyling}\n          position='top'\n          margin='none'\n          animation='fadeIn'\n        >\n          <h3 style={titleStyling}>{`Confirm result`}</h3>\n          {fixtureDetails()}\n          <SetWinner\n            team={home}\n            fixtureID={fixId}\n            setShow={setShow}\n            refreshFixtureData={refreshFixtureData}\n          />\n          <SetWinner\n            team={away}\n            fixtureID={fixId}\n            setShow={setShow}\n            refreshFixtureData={refreshFixtureData}\n          />\n          <SetInvalidated\n            fixtureID={fixId}\n            setShow={setShow}\n            refreshFixtureData={refreshFixtureData}\n          />\n        </Layer>\n      )}\n    </Box>\n  );\n};\n\nconst titleStyling: React.CSSProperties = {\n  color: COLORS.purple,\n  marginBottom: \"20px\",\n};\n\nconst modalStyling: React.CSSProperties = {\n  padding: BOX.padding,\n  borderRadius: BOX.borderRadius,\n  marginTop: \"10%\",\n};\n\nexport default ConfirmResultModal;\n","import React, { FC, useState } from \"react\";\nimport { Button } from \"grommet\";\nimport { Fixture } from \"../types\";\nimport SetResultModal from \"./ConfirmResultModal\";\n\ninterface AdminFixtureControlProps {\n  fixture: Fixture;\n  refreshFixtureData: () => void;\n}\n\nconst AdmimFixtureControls: FC<AdminFixtureControlProps> = (props) => {\n  const { fixture, refreshFixtureData } = props;\n  const [showModal, setShowModal] = useState(false);\n\n  function getLabel(): string {\n    if (fixture.active) {\n      return \"Set Result\";\n    }\n\n    if (fixture.invalidated) {\n      return \"Invalidated\";\n    }\n\n    if (!fixture.active) {\n      return `${fixture.winner} won`;\n    }\n\n    return \"Error\";\n  }\n\n  return (\n    <div>\n      <Button\n        primary\n        label={getLabel()}\n        disabled={!fixture.active}\n        size='small'\n        onClick={() => setShowModal(true)}\n      />\n      {fixture.active && (\n        <SetResultModal\n          setShow={setShowModal}\n          show={showModal}\n          fixture={fixture}\n          refreshFixtureData={refreshFixtureData}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default AdmimFixtureControls;\n","import React, { FC, useContext, useState } from \"react\";\nimport { GlobalState } from \"../../globalState\";\nimport { ERROR_CODE_TX_REJECTED_BY_USER } from \"../../constants\";\nimport { Box, Button, Form, FormField, Select, TextInput } from \"grommet\";\nimport { BigNumber, ethers } from \"ethers\";\n\ninterface PlaceBetProps {\n  home: string;\n  away: string;\n  fixtureID: BigNumber;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  refreshBets: () => void;\n}\n\nconst PlaceBet: FC<PlaceBetProps> = (props) => {\n  const { home, away, fixtureID, setShow, refreshBets } = props;\n\n  const [winner, setWinner] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [error, setError] = useState<null | Error>(null);\n  const [status, setStatus] = useState(\"typing\");\n\n  const { setTransactionError, bettingContract, setTxBeingSet } =\n    useContext(GlobalState);\n\n  const _placeBet = async (\n    fixtureID: BigNumber,\n    team: string,\n    amount: BigNumber\n  ) => {\n    try {\n      setTransactionError(undefined);\n\n      if (!bettingContract) {\n        throw new Error(\"Betting Contract not available\");\n      }\n\n      const tx = await bettingContract.placeBet(fixtureID, team, amount, {\n        value: amount,\n      });\n      setTxBeingSet(tx.hash);\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error: any) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(\"Caught error trying to place bet \", error);\n      setTransactionError(error);\n    } finally {\n      setTxBeingSet(undefined);\n    }\n  };\n\n  function resetForm(): void {\n    setWinner(\"\");\n    setAmount(0);\n  }\n\n  function isFormEmpty(): boolean {\n    if (winner === \"\" || amount === 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  async function submitBet(e: any) {\n    e.preventDefault();\n    setStatus(\"submitting\");\n    try {\n      await _placeBet(\n        fixtureID,\n        winner,\n        ethers.utils.parseEther(amount.toString())\n      );\n      setStatus(\"success\");\n      setShow(false);\n      refreshBets();\n    } catch (err) {\n      setStatus(\"typing\");\n      if (err instanceof Error) {\n        setError(err);\n        console.error(error);\n      }\n    }\n  }\n\n  return (\n    <>\n      <Form value={\"Hello\"} onReset={resetForm} onSubmit={submitBet}>\n        <FormField label='To Win'>\n          <Select\n            options={[home, away]}\n            value={winner}\n            onChange={({ option }) => setWinner(option)}\n          />\n        </FormField>\n        <FormField htmlFor='text-input-id' label='Amount (ETH)'>\n          <TextInput\n            value={amount}\n            type='number'\n            onChange={(e) => setAmount(Number(e.target.value))}\n          />\n        </FormField>\n        <Box direction='row' gap='medium' margin={{ top: \"medium\" }}>\n          <Button\n            type='submit'\n            primary\n            label='Submit'\n            disabled={isFormEmpty() || status === \"submitting\"}\n          />\n          <Button type='reset' label='Reset' />\n        </Box>\n      </Form>\n    </>\n  );\n};\n\nexport default PlaceBet;\n","import { Box, Text, Layer, NameValueList, NameValuePair } from \"grommet\";\nimport React, { FC } from \"react\";\nimport { BOX, COLORS } from \"../theme\";\nimport { Fixture } from \"../types\";\nimport PlaceBet from \"./transactionComponents/PlaceBet\";\n\ninterface PlaceBetModalProps {\n  show: boolean;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  fixture: Fixture;\n  refreshBets: () => void;\n}\n\nconst PlaceBetModal: FC<PlaceBetModalProps> = (props) => {\n  const { show, setShow, fixture, refreshBets } = props;\n  const { fixId, home, away, date } = fixture;\n\n  function fixtureDetails() {\n    return (\n      <Box width='medium' margin={{ bottom: \"medium\" }} justify='center'>\n        <NameValueList>\n          <NameValuePair name='Home team'>\n            <Text color='text-strong'>{home}</Text>\n          </NameValuePair>\n          <NameValuePair name='Away team'>\n            <Text color='text-strong'>{away}</Text>\n          </NameValuePair>\n          <NameValuePair name='Date'>\n            <Text color='text-strong'>{date}</Text>\n          </NameValuePair>\n        </NameValueList>\n      </Box>\n    );\n  }\n\n  return (\n    <Box background={{ dark: false }}>\n      {show && (\n        <Layer\n          onEsc={() => setShow(false)}\n          onClickOutside={() => setShow(false)}\n          style={modalStyling}\n          position='top'\n          margin='none'\n          animation='fadeIn'\n        >\n          <h3 style={titleStyling}>Place bet</h3>\n          {fixtureDetails()}\n          <PlaceBet\n            home={home}\n            away={away}\n            fixtureID={fixId}\n            setShow={setShow}\n            refreshBets={refreshBets}\n          />\n        </Layer>\n      )}\n    </Box>\n  );\n};\n\nconst titleStyling: React.CSSProperties = {\n  color: COLORS.purple,\n  marginBottom: \"20px\",\n};\n\nconst modalStyling: React.CSSProperties = {\n  padding: BOX.padding,\n  borderRadius: BOX.borderRadius,\n  marginTop: \"10%\",\n};\n\nexport default PlaceBetModal;\n","import React, { FC, useState } from \"react\";\nimport { Button } from \"grommet\";\nimport { Fixture } from \"../types\";\nimport PlaceBetModal from \"./PlaceBetModal\";\n\ninterface FixtureControlProps {\n  fixture: Fixture;\n  refreshBets: () => void;\n}\n\nconst FixtureControls: FC<FixtureControlProps> = (props) => {\n  const { fixture, refreshBets } = props;\n  const [showModal, setShowModal] = useState(false);\n\n  function getLabel(): string {\n    if (fixture.active) {\n      return \"Place bet\";\n    }\n    if (fixture.invalidated) {\n      return \"Invalidated\";\n    }\n    if (!fixture.active) {\n      return `${fixture.winner} won`;\n    }\n\n    return \"Error\";\n  }\n\n  return (\n    <>\n      <Button\n        primary\n        label={getLabel()}\n        disabled={!fixture.active}\n        size='small'\n        onClick={() => setShowModal(true)}\n      />\n      {fixture.active && (\n        <PlaceBetModal\n          setShow={setShowModal}\n          show={showModal}\n          fixture={fixture}\n          refreshBets={refreshBets}\n        />\n      )}\n    </>\n  );\n};\n\nexport default FixtureControls;\n","import { BigNumber, ethers } from \"ethers\";\nimport { PLATFORM_COMISSION } from \"../../constants\";\n\nexport function calculatePotentialEarnings(\n  winBetTotal: BigNumber,\n  loseBetTotal: BigNumber,\n  betAmount: BigNumber\n): Number {\n  const winnersTotal = Number(ethers.utils.formatEther(winBetTotal));\n  const losersTotal =\n    Number(ethers.utils.formatEther(loseBetTotal)) * (1 - PLATFORM_COMISSION);\n  const bet = Number(ethers.utils.formatEther(betAmount));\n\n  return bet + (bet / winnersTotal) * losersTotal;\n}\n\nexport function greatestCommonDivisor(a: number, b: number): number {\n  return b !== 0 ? greatestCommonDivisor(b, a % b) : a;\n}\n","import { BigNumber, ethers } from \"ethers\";\nimport { Spinner, Text } from \"grommet\";\nimport React, { useContext, useEffect, useState, FC } from \"react\";\nimport { REFRESH_RATE } from \"../../constants\";\nimport { GlobalState } from \"../../globalState\";\nimport { Bet, BettingOdds } from \"../../types\";\nimport {\n  calculatePotentialEarnings,\n  greatestCommonDivisor,\n} from \"../utils/MathUtils\";\n\ninterface GetOddsProps {\n  fixtureId: BigNumber;\n}\n\ninterface GetPotentialEarningsProps {\n  fixtureId: BigNumber;\n  bet: Bet;\n}\n\nasync function _getBettingTotals(\n  bettingContract: ethers.Contract,\n  fixtureId: BigNumber\n) {\n  return await bettingContract.getBettingTotals(fixtureId);\n}\n\nexport const GetOdds: FC<GetOddsProps> = (props) => {\n  const { fixtureId } = props;\n  const { bettingContract } = useContext(GlobalState);\n  const [odds, setOdds] = useState<undefined | BettingOdds>(undefined);\n\n  /**\n   * This function will try to reduce the odds down to the simplest fraction.\n   *\n   * This calculation get tricky with decimals so we have floored the value\n   * of the bets first. This will mean that the odds are always under estimated.\n   */\n  function processBettingOdds(home: BigNumber, away: BigNumber): BettingOdds {\n    const _home = Math.floor(Number(ethers.utils.formatEther(home)));\n    const _away = Math.floor(Number(ethers.utils.formatEther(away)));\n\n    const gcd =\n      _home === 0 || _away === 0 ? 1 : greatestCommonDivisor(_home, _away);\n\n    return { homeBets: _home / gcd, awayBets: _away / gcd };\n  }\n\n  async function getBettingOdds() {\n    let bettingTotals;\n\n    if (!bettingContract) {\n      throw new Error(\"Betting Contract not available\");\n    } else {\n      bettingTotals = await _getBettingTotals(bettingContract, fixtureId);\n    }\n\n    // Reduce ratio\n    const formattedOdds = processBettingOdds(\n      bettingTotals.home,\n      bettingTotals.away\n    );\n\n    setOdds(formattedOdds);\n  }\n\n  useEffect(() => {\n    // Refresh every second\n    const interval = setInterval(() => getBettingOdds(), REFRESH_RATE);\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  if (!odds) {\n    return (\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <Spinner />\n      </div>\n    );\n  } else {\n    return <div>{`${odds.homeBets}:${odds.awayBets}`}</div>;\n  }\n};\n\nexport const GetPotentialEarnings: FC<GetPotentialEarningsProps> = (props) => {\n  const { fixtureId, bet } = props;\n  const { bettingContract } = useContext(GlobalState);\n  const [earnings, setEarnings] = useState<undefined | Number>(undefined);\n\n  useEffect(() => {\n    // Refresh every second\n    const interval = setInterval(() => estimateEarnings(), REFRESH_RATE);\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  /**\n   * This function will try to estimate the earnings of a game\n   */\n  async function estimateEarnings() {\n    // Skip estimation if payOut is known\n    if (bet.invalidated || bet.payOut.isNegative()) {\n      setEarnings(Number(ethers.utils.formatEther(bet.amount)));\n      return;\n    }\n\n    // Get betting totals\n    let bettingTotals;\n    if (!bettingContract) {\n      throw new Error(\"Betting Contract not available\");\n    } else {\n      bettingTotals = await _getBettingTotals(bettingContract, fixtureId);\n    }\n\n    // Calculate potential earnings\n    const potetialEarnings =\n      bet.team === (await bettingContract.getFixture(Number(bet.fixId))).home\n        ? calculatePotentialEarnings(\n            bettingTotals.home,\n            bettingTotals.away,\n            bet.amount\n          )\n        : calculatePotentialEarnings(\n            bettingTotals.away,\n            bettingTotals.home,\n            bet.amount\n          );\n\n    setEarnings(potetialEarnings);\n  }\n\n  function getDisplayOptions(earnings: Number): [color: string, sign: string] {\n    if (earnings > 0) {\n      return [\"status-ok\", \"+\"];\n    } else if (earnings === 0) {\n      return [\"status-warning\", \"\"];\n    } else {\n      return [\"status-error\", \"-\"];\n    }\n  }\n\n  if (earnings === undefined) {\n    return (\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <Spinner />\n      </div>\n    );\n  } else if (bet.invalidated) {\n    return <Text color='status-disabled'>Bet invalidated</Text>;\n  } else {\n    const [color, sign] = getDisplayOptions(earnings);\n\n    return (\n      <Text color={color} weight='bold'>{`${sign}${earnings.toFixed(\n        1\n      )} ETH`}</Text>\n    );\n  }\n};\n","import {\n  Spinner,\n  Table,\n  TableBody,\n  TableCell,\n  TableHeader,\n  TableRow,\n} from \"grommet\";\nimport React, { FC, useContext, useEffect, useState } from \"react\";\nimport { REFRESH_RATE } from \"../../constants\";\nimport { GlobalState } from \"../../globalState\";\nimport { Fixture } from \"../../types\";\nimport AdminFixtureControls from \"../AdminFixtureControls\";\nimport FixtureControls from \"../FixtureControls\";\nimport { GetOdds } from \"./GetBettingTotals\";\n\ninterface GetFixturesProps {\n  admin?: boolean;\n  refreshBets?: () => void;\n}\n\nconst GetFixtures: FC<GetFixturesProps> = (props) => {\n  const { admin, refreshBets } = props;\n  const { bettingContract } = useContext(GlobalState);\n  const [fixtures, setFixtures] = useState<null | any[]>(null);\n\n  async function _getFixtures() {\n    if (!bettingContract) {\n      throw new Error(\"Betting Contract not available\");\n    } else {\n      let fixtureList = [];\n      const fixtureCount = await bettingContract.getFixtureCount();\n\n      for (let i = 0; i < fixtureCount; i++) {\n        fixtureList.push(await bettingContract.getFixture(i));\n      }\n\n      setFixtures(fixtureList);\n    }\n  }\n\n  useEffect(() => {\n    // Refresh every second\n    const interval = setInterval(() => _getFixtures(), REFRESH_RATE);\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  function tableData() {\n    const fixtureData = fixtures?.map((fixture: Fixture) => {\n      const { fixId, home, away, date } = fixture;\n      return (\n        <TableRow key={fixId.toString()}>\n          <TableCell>{home}</TableCell>\n          <TableCell align='center'>{away}</TableCell>\n          <TableCell align='center'>{date}</TableCell>\n          <TableCell align='center'>\n            <GetOdds fixtureId={fixId} />\n          </TableCell>\n          {!admin && refreshBets && (\n            <TableCell align='center'>\n              <FixtureControls fixture={fixture} refreshBets={refreshBets} />\n            </TableCell>\n          )}\n          {admin && (\n            <TableCell align='center'>\n              <AdminFixtureControls\n                fixture={fixture}\n                refreshFixtureData={_getFixtures}\n              />\n            </TableCell>\n          )}\n        </TableRow>\n      );\n    });\n\n    return <TableBody>{fixtureData}</TableBody>;\n  }\n\n  function tableHeader() {\n    let columns = [\"Home\", \"Away\", \"Date\", \"Odds\"];\n    if (!admin) {\n      columns.push(\"Bet\");\n    }\n    if (admin) {\n      columns.push(\"Controls\");\n    }\n\n    const tableCells = columns.map((columnTitle) => {\n      const align = columnTitle === columns[0] ? \"left\" : \"center\";\n\n      return (\n        <TableCell scope='col' border='bottom' key={columnTitle} align={align}>\n          {columnTitle}\n        </TableCell>\n      );\n    });\n\n    return (\n      <TableHeader>\n        <TableRow>{tableCells}</TableRow>\n      </TableHeader>\n    );\n  }\n\n  function table() {\n    return (\n      <Table>\n        {tableHeader()}\n        {tableData()}\n      </Table>\n    );\n  }\n\n  if (fixtures === null) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Spinner size='xlarge' />\n      </div>\n    );\n  }\n  return (\n    <div>\n      {fixtures.length === 0 ? \"There are currently no fixtures\" : table()}\n    </div>\n  );\n};\n\nexport default GetFixtures;\n","import { useContext, useEffect, useState } from \"react\";\nimport { REFRESH_RATE } from \"../../constants\";\nimport { GlobalState } from \"../../globalState\";\nimport { Bet } from \"../../types\";\n\ntype BetsHook = [bets: Bet[] | null, refresh: () => void];\n\n// Returns a hook that returns bets and refresh function\nconst GetBets = (): BetsHook => {\n  const { bettingContract } = useContext(GlobalState);\n  const [userBets, setUserBets] = useState<any[] | null>(null);\n\n  async function _getUserBets() {\n    if (!bettingContract) {\n      throw new Error(\"Betting Contract not available\");\n    } else {\n      let userBets = [];\n      const userBetIds = await bettingContract.getUserBets();\n\n      for (let i = 0; i < userBetIds.length; i++) {\n        userBets.push(await bettingContract.getBet(userBetIds[i]));\n      }\n\n      setUserBets(userBets);\n    }\n  }\n\n  useEffect(() => {\n    // Refresh every second\n    const interval = setInterval(() => _getUserBets(), REFRESH_RATE);\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  return [userBets, _getUserBets];\n};\n\nexport default GetBets;\n","import React, { FC, useContext, useState } from \"react\";\nimport { Button } from \"grommet\";\nimport { Bet } from \"../../types\";\nimport { BigNumber } from \"ethers\";\nimport { GlobalState } from \"../../globalState\";\nimport { ERROR_CODE_TX_REJECTED_BY_USER } from \"../../constants\";\n\ninterface RetrieveFundsProps {\n  bet: Bet;\n  refreshBets: () => void;\n}\n\n/**\n * NOTE: Caller must have filtered out payedOut bets\n */\nconst RetrieveFunds: FC<RetrieveFundsProps> = (props) => {\n  const { bet, refreshBets } = props;\n  const { payOut, betId, invalidated } = bet;\n  const [error, setError] = useState<null | Error>(null);\n  const [status, setStatus] = useState(\"doing nothing\");\n  const { setTransactionError, bettingContract, setTxBeingSet } =\n    useContext(GlobalState);\n\n  const _retrieveFunds = async (betID: BigNumber) => {\n    try {\n      setTransactionError(undefined);\n\n      if (!bettingContract) {\n        throw new Error(\"Betting Contract not available\");\n      }\n\n      const tx = await bettingContract.retrieveFunds(betID);\n      setTxBeingSet(tx.hash);\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error: any) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(\"Caught error setting fixutre as invalidated \", error);\n      setTransactionError(error);\n    } finally {\n      setTxBeingSet(undefined);\n    }\n  };\n\n  function getLabel(): string {\n    if (invalidated) {\n      return \"Claim Refund\";\n    }\n    if (payOut.gt(0)) {\n      return \"Claim Winnings\";\n    }\n    if (payOut.isZero()) {\n      return \"In Progress\";\n    }\n\n    return \"Error\";\n  }\n\n  async function claimWinnings(e: any) {\n    e.preventDefault();\n    setStatus(\"claiming\");\n    try {\n      await _retrieveFunds(betId);\n      refreshBets();\n    } catch (err) {\n      setStatus(\"error\");\n      if (err instanceof Error) {\n        setError(err);\n        console.error(error);\n      }\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        primary\n        label={status !== \"claiming\" ? getLabel() : \"Claiming...\"}\n        disabled={payOut.isZero() || status === \"claiming\"}\n        size='small'\n        onClick={claimWinnings}\n      />\n    </div>\n  );\n};\n\nexport default RetrieveFunds;\n","import { ethers } from \"ethers\";\nimport {\n  Spinner,\n  Table,\n  TableBody,\n  TableCell,\n  TableHeader,\n  TableRow,\n} from \"grommet\";\nimport React, { FC } from \"react\";\nimport { Bet } from \"../types\";\nimport RetrieveFunds from \"./transactionComponents/RetrieveFunds\";\nimport { GetPotentialEarnings } from \"./viewComponents/GetBettingTotals\";\n\ninterface ActiveBetsProps {\n  userBets: Bet[] | null;\n  refreshBets: () => void;\n}\n\nconst ActiveBets: FC<ActiveBetsProps> = (props) => {\n  const { userBets, refreshBets } = props;\n\n  const filteredActiveBets = userBets?.filter((bet) => !bet.payedOut);\n\n  function tableData() {\n    const betData = filteredActiveBets?.map((bet: Bet) => {\n      const { betId, team, amount, fixId } = bet;\n\n      const formattedAmount = ethers.utils.formatEther(amount);\n\n      return (\n        <TableRow key={betId.toString()}>\n          <TableCell>{team}</TableCell>\n          <TableCell align='center'>{formattedAmount}</TableCell>\n          <TableCell align='center'>\n            <GetPotentialEarnings fixtureId={fixId} bet={bet} />\n          </TableCell>\n          <TableCell align='center'>\n            <RetrieveFunds bet={bet} refreshBets={refreshBets} />\n          </TableCell>\n        </TableRow>\n      );\n    });\n\n    return <TableBody>{betData}</TableBody>;\n  }\n\n  function tableHeader() {\n    let columns = [\"Team\", \"Amount\", \"Potential Earnings\", \"Result\"];\n\n    const tableCells = columns.map((columnTitle) => {\n      const align = columnTitle === columns[0] ? \"left\" : \"center\";\n\n      return (\n        <TableCell scope='col' border='bottom' key={columnTitle} align={align}>\n          {columnTitle}\n        </TableCell>\n      );\n    });\n\n    return (\n      <TableHeader>\n        <TableRow>{tableCells}</TableRow>\n      </TableHeader>\n    );\n  }\n\n  function table() {\n    return (\n      <Table>\n        {tableHeader()}\n        {tableData()}\n      </Table>\n    );\n  }\n\n  if (userBets === null) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Spinner size='xlarge' />\n      </div>\n    );\n  }\n  return (\n    <div style={{ marginBottom: \"15px\" }}>\n      {filteredActiveBets?.length === 0\n        ? \"You don't have any active bets\"\n        : table()}\n    </div>\n  );\n};\n\nexport default ActiveBets;\n","import { BigNumber, ethers } from \"ethers\";\nimport {\n  Spinner,\n  Table,\n  TableBody,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Text,\n} from \"grommet\";\nimport { Checkmark, Clear, Close } from \"grommet-icons\";\nimport React, { FC } from \"react\";\nimport { Bet } from \"../types\";\n\ninterface InactiveBetsProps {\n  userBets: Bet[] | null;\n}\n\nconst InactiveBets: FC<InactiveBetsProps> = (props) => {\n  const { userBets } = props;\n\n  const inactiveBets = userBets?.filter((bet) => bet.payedOut);\n\n  function betStatus(won: boolean, invalidated: boolean) {\n    if (won && !invalidated) {\n      return <Checkmark color='status-ok' />;\n    } else if (invalidated) {\n      return <Clear color='status-warning' />;\n    } else {\n      return <Close color='status-error' />;\n    }\n  }\n\n  function getPayOut(won: boolean, invalidated: boolean, payOut: BigNumber) {\n    const formattedPayOut = Number(ethers.utils.formatEther(payOut)).toFixed(1);\n\n    if (won && !invalidated) {\n      return (\n        <Text\n          color='status-ok'\n          weight='bold'\n        >{`+${formattedPayOut} ETH Won`}</Text>\n      );\n    } else if (invalidated) {\n      return (\n        <Text color='status-warning' weight='bold'>\n          Invalidated\n        </Text>\n      );\n    } else {\n      return (\n        <Text\n          color='status-error'\n          weight='bold'\n        >{`${formattedPayOut} ETH Lost`}</Text>\n      );\n    }\n  }\n\n  function tableData() {\n    const betData = inactiveBets?.map((bet: Bet) => {\n      const { betId, team, amount, invalidated, payOut } = bet;\n\n      const won = !invalidated && payOut.gt(0) ? true : false;\n      const formattedAmount = ethers.utils.formatEther(amount);\n\n      return (\n        <TableRow key={betId.toString()}>\n          <TableCell>{team}</TableCell>\n          <TableCell style={{ alignItems: \"center\" }}>\n            {betStatus(won, invalidated)}\n          </TableCell>\n          <TableCell align='center'>{formattedAmount}</TableCell>\n          <TableCell align='center'>\n            {getPayOut(won, invalidated, payOut)}\n          </TableCell>\n        </TableRow>\n      );\n    });\n\n    return <TableBody>{betData}</TableBody>;\n  }\n\n  function tableHeader() {\n    let columns = [\"Team\", \"Result\", \"Amount\", \"Payout\"];\n\n    const tableCells = columns.map((columnTitle) => {\n      const align = columnTitle === columns[0] ? \"left\" : \"center\";\n\n      return (\n        <TableCell scope='col' border='bottom' key={columnTitle} align={align}>\n          {columnTitle}\n        </TableCell>\n      );\n    });\n\n    return (\n      <TableHeader>\n        <TableRow>{tableCells}</TableRow>\n      </TableHeader>\n    );\n  }\n\n  function table() {\n    return (\n      <Table>\n        {tableHeader()}\n        {tableData()}\n      </Table>\n    );\n  }\n\n  if (userBets === null) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Spinner size='xlarge' />\n      </div>\n    );\n  }\n  return (\n    <div style={{ marginBottom: \"15px\" }}>\n      {inactiveBets?.length === 0\n        ? \"You don't have any completed bets\"\n        : table()}\n    </div>\n  );\n};\n\nexport default InactiveBets;\n","import React, { FC } from \"react\";\nimport { COLORS, BOX, DASH } from \"../theme\";\nimport GetFixtures from \"./viewComponents/GetFixtures\";\nimport { Box, Distribution, Heading } from \"grommet\";\nimport GetBets from \"./viewComponents/GetBets\";\nimport ActiveBets from \"./ActiveBets\";\nimport InactiveBets from \"./InactiveBets\";\n\nconst UQBetDashboard: FC = () => {\n  const [userBets, refreshBets] = GetBets();\n\n  return (\n    <div style={betSlipStyling}>\n      <Heading margin={{ bottom: \"medium\" }} level='2'>\n        Welcome to your dashboard.\n      </Heading>\n      <Distribution\n        values={[\n          { value: 50, color: \"brand\" },\n          { value: 30, color: COLORS.lightPurple },\n          { value: 20, color: \"light-2\" },\n        ]}\n        style={{\n          minHeight: \"600px\",\n          overflow: \"visible\",\n        }}\n      >\n        {(value) => (\n          <Box\n            pad='medium'\n            style={{\n              borderRadius: BOX.borderRadius,\n            }}\n            background={value.color}\n            fill={true}\n            overflow='scroll'\n          >\n            {value.value === 50 && (\n              <>\n                <Heading margin={{ bottom: \"small\" }} level='3'>\n                  Fixtures\n                </Heading>\n                <GetFixtures refreshBets={refreshBets} />\n              </>\n            )}\n            {value.value === 30 && (\n              <>\n                <Heading margin={{ bottom: \"small\" }} level='3' color='white'>\n                  Active Bets\n                </Heading>\n                <ActiveBets userBets={userBets} refreshBets={refreshBets} />\n              </>\n            )}\n            {value.value === 20 && (\n              <>\n                <Heading margin={{ bottom: \"small\" }} level='3'>\n                  Completed Bets\n                </Heading>\n                <InactiveBets userBets={userBets} />\n              </>\n            )}\n          </Box>\n        )}\n      </Distribution>\n    </div>\n  );\n};\n\nconst betSlipStyling: React.CSSProperties = {\n  color: COLORS.purple,\n  backgroundColor: \"white\",\n  borderRadius: BOX.borderRadius,\n  padding: BOX.padding,\n  width: DASH.width,\n  minHeight: DASH.minHeight,\n  margin: \"auto\",\n};\n\nexport default UQBetDashboard;\n","import React, { FC, useContext, useState } from \"react\";\nimport { GlobalState } from \"../../globalState\";\nimport { COLORS } from \"../../theme\";\nimport { ConnectWallet } from \"../utils/ConnectWallet\";\nimport Header from \"../Header\";\nimport { NoWalletDetected } from \"../utils/NoWalletDetected\";\nimport { Navigate } from \"react-router-dom\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport TokenArtifact from \"../../contracts/BetContract.json\";\nimport contractAddress from \"../../contracts/contract-address.json\";\nimport UQBetDashboard from \"../UQBetDashboard\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n\n// This is the Hardhat Network id, you might change it in the hardhat.config.js.\n// If you are using MetaMask, be sure to change the Network id to 1337.\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nexport const HARDHAT_NETWORK_ID = \"5\";\n\nconst UQBet: FC = () => {\n  const {\n    setNetworkError,\n    selectedAddress,\n    networkError,\n    setSelectedAddress,\n    setBalance,\n    setContract,\n    resetState,\n  } = useContext(GlobalState);\n\n  let _pollDataInterval: any;\n  let _provider: Web3Provider;\n  const [_contractOwner, _setContractOwner] = useState();\n\n  /**\n   * Function defintions\n   */\n\n  // This method checks if Metamask selected network is Localhost:8545\n  function _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    setNetworkError(\"Please connect Metamask to Goerli\");\n\n    return false;\n  }\n\n  async function _initializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    _provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // Then, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n    let contract = new ethers.Contract(\n      contractAddress.Token,\n      TokenArtifact.abi,\n      _provider.getSigner(0)\n    );\n\n    setContract(contract);\n    _setContractOwner((await contract.owner()).toLowerCase());\n  }\n\n  async function _updateEthBalance(userAddress: string) {\n    const balance = ethers.utils.formatEther(\n      await _provider.getBalance(userAddress)\n    );\n\n    // Limit to two decimal places\n    setBalance(Number(balance).toFixed(2));\n  }\n\n  // The next two methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n  function _startPollingData(userAddress: string) {\n    _pollDataInterval = setInterval(() => _updateEthBalance(userAddress), 1000);\n\n    // We run it once immediately so we don't have to wait for it\n    _updateEthBalance(userAddress);\n  }\n\n  function _stopPollingData() {\n    clearInterval(_pollDataInterval);\n    _pollDataInterval = undefined;\n  }\n\n  function _initialize(userAddress: string) {\n    // First we initialize ethers\n    _initializeEthers();\n\n    // Then we store the user's address in the component's state\n    setSelectedAddress(userAddress);\n\n    // Start polling the users eth balance\n    _startPollingData(userAddress);\n  }\n\n  // This method just clears part of the state.\n  function _dismissNetworkError() {\n    setNetworkError(undefined);\n  }\n\n  // This method is run when the user clicks the Connect. It connects the\n  // dapp to the user's wallet, and initializes it.\n  async function _connectWallet() {\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [accountAddy] = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!_checkNetwork()) {\n      return;\n    }\n\n    _initialize(accountAddy);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", (newAddress: any) => {\n      _stopPollingData();\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state\n      if (resetState) {\n        resetState();\n      }\n\n      document.location.replace(\"/\");\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on(\"chainChanged\", () => {\n      _stopPollingData();\n      if (resetState) {\n        return resetState();\n      }\n    });\n  }\n\n  /**\n   * Return statements\n   */\n\n  document.body.style.backgroundColor = COLORS.purple;\n\n  // Ethereum wallets inject the window.ethereum object. If it hasn't been\n  // injected, we instruct the user to install MetaMask.\n  if (window.ethereum === undefined) {\n    return <NoWalletDetected />;\n  }\n\n  // The next thing we need to do, is to ask the user to connect their wallet.\n  // When the wallet gets connected, we are going to save the users's address\n  // in the component's state. So, if it hasn't been saved yet, we have\n  // to show the ConnectWallet component.\n  //\n  // Note that we pass it a callback that is going to be called when the user\n  // clicks a button. This callback just calls the _connectWallet method.\n  if (!selectedAddress) {\n    return (\n      <ConnectWallet\n        connectWallet={() => _connectWallet()}\n        networkError={networkError}\n        dismiss={() => _dismissNetworkError()}\n      />\n    );\n  }\n\n  // Connected address is owner of the contract.\n  if (selectedAddress === _contractOwner) {\n    return (\n      <>\n        <Navigate to=\"/admin\" />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Header />\n      <UQBetDashboard />\n    </>\n  );\n};\n\nexport default UQBet;\n","import React, { FC, useContext, useState } from \"react\";\nimport { GlobalState } from \"../../globalState\";\nimport { ERROR_CODE_TX_REJECTED_BY_USER } from \"../../constants\";\nimport { Box, Button, DateInput, Form, FormField, TextInput} from \"grommet\";\n\nconst AddFixture: FC = () => {\n  const { setTransactionError, bettingContract, setTxBeingSet } =\n    useContext(GlobalState);\n\n  const [awayTeam, setAwayTeam] = useState(\"\");\n  const [homeTeam, setHomeTeam] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [error, setError] = useState<null | Error>(null);\n  const [status, setStatus] = useState(\"typing\");\n\n  const _addFixture = async (home: string, away: string, date: string) => {\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      setTransactionError(undefined);\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      if (!bettingContract) {\n        throw new Error(\"Betting Contract not available\");\n      }\n      const tx = await bettingContract.addFixture(home, away, date);\n      setTxBeingSet(tx.hash);\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx.wait();\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that made the transaction fail when it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      // await this._updateBalance();\n    } catch (error: any) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(\"Caught error sending add fixture transaction: \", error);\n      setTransactionError(error);\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      setTxBeingSet(undefined);\n    }\n  };\n\n  async function handleSubmit(e: any) {\n    e.preventDefault();\n    setStatus(\"submitting\");\n    try {\n      await _addFixture(homeTeam, awayTeam, date);\n      setStatus(\"success\");\n      resetForm();\n    } catch (err) {\n      setStatus(\"typing\");\n      if (err instanceof Error) {\n        setError(err);\n      }\n    }\n  }\n\n  function isFormEmpty(): boolean {\n    if (date.length === 0 || awayTeam.length === 0 || homeTeam.length === 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function resetForm(): void {\n    setAwayTeam(\"\");\n    setHomeTeam(\"\");\n    setDate(\"\");\n  }\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit} onReset={resetForm}>\n        <FormField label='Home team' type='text'>\n          <TextInput\n            placeholder='Home team'\n            value={homeTeam}\n            onChange={(e) => setHomeTeam(e.target.value)}\n          />\n        </FormField>\n        <FormField label='Away team' type='text'>\n          <TextInput\n            placeholder='Away team'\n            value={awayTeam}\n            onChange={(e) => setAwayTeam(e.target.value)}\n          />\n        </FormField>\n        <FormField label='Date' type='date'>\n          <DateInput\n            format='dd/mm/yyyy'\n            value={date}\n            onChange={({ value }) =>\n              setDate(new Date(value.toString()).toLocaleDateString())\n            }\n          />\n        </FormField>\n        <Box direction='row' gap='medium' margin={{ top: \"medium\" }}>\n          <Button\n            type='submit'\n            primary\n            label='Submit'\n            disabled={isFormEmpty() || status === \"submitting\"}\n          />\n          <Button type='reset' label='Reset' />\n        </Box>\n        {error !== null && <p className='Error'>{error.message}</p>}\n      </Form>\n    </>\n  );\n};\n\nexport default AddFixture;","import React, { FC } from \"react\";\nimport { Button } from \"grommet\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FormPrevious } from \"grommet-icons\";\n\ninterface BackButtonProps {\n  style?: React.CSSProperties;\n}\n\nconst BackButton: FC<BackButtonProps> = (props) => {\n  const { style } = props;\n  const navigate = useNavigate();\n\n  return (\n    <>\n      <Button style={style} onClick={() => navigate(-1)}>\n        <FormPrevious color={\"brand\"} size='35' />\n      </Button>\n    </>\n  );\n};\n\nexport default BackButton;\n","import React, { FC } from \"react\";\nimport { BOX, COLORS, DASH } from \"../../../theme\";\nimport Header from \"../../Header\";\nimport AddFixture from \"../../transactionComponents/AddFixture\";\nimport BackButton from \"../../utils/BackButton\";\n\nconst AddFixturePage: FC = () => {\n  document.body.style.backgroundColor = COLORS.purple;\n\n  return (\n    <>\n      <Header />\n      <div style={addFixturePageStyle}>\n        <div style={headerStyle}>\n          <BackButton\n            style={{\n              position: \"absolute\",\n              justifySelf: \"center\",\n            }}\n          />\n          <h2\n            style={{\n              textAlign: \"center\",\n              justifySelf: \"center\",\n              flexGrow: 1,\n            }}\n          >\n            Add fixture\n          </h2>\n        </div>\n        <AddFixture />\n      </div>\n    </>\n  );\n};\n\nconst addFixturePageStyle: React.CSSProperties = {\n  color: COLORS.purple,\n  backgroundColor: \"white\",\n  borderRadius: BOX.borderRadius,\n  padding: BOX.padding,\n  width: DASH.width,\n  minHeight: DASH.minHeight,\n  margin: \"auto\",\n};\n\nconst headerStyle: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  marginBottom: \"30px\",\n};\n\nexport default AddFixturePage;\n","import React, { FC, useContext, useState } from \"react\";\nimport { Button } from \"grommet\";\nimport { GlobalState } from \"../../globalState\";\nimport { ERROR_CODE_TX_REJECTED_BY_USER } from \"../../constants\";\n\ninterface TakeEarningsProps {\n  style?: React.CSSProperties;\n}\n\nconst TakeEarnings: FC<TakeEarningsProps> = (props) => {\n  const { setTransactionError, bettingContract, setTxBeingSet } =\n    useContext(GlobalState);\n  const { style } = props;\n  const [error, setError] = useState<null | Error>(null);\n  const [status, setStatus] = useState(\"typing\");\n\n  const _drainContract = async () => {\n    try {\n      setTransactionError(undefined);\n\n      if (!bettingContract) {\n        throw new Error(\"Betting Contract not available\");\n      }\n\n      const tx = await bettingContract.takeEarnings();\n      setTxBeingSet(tx.hash);\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error: any) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(\"Caught error trying to take earnings \", error);\n      setTransactionError(error);\n    } finally {\n      setTxBeingSet(undefined);\n    }\n  };\n\n  async function takeEarnings(e: any) {\n    e.preventDefault();\n    setStatus(\"draining...\");\n    try {\n      await _drainContract();\n      setStatus(\"success\");\n    } catch (err) {\n      setStatus(\"error\");\n      if (err instanceof Error) {\n        setError(err);\n        console.error(status);\n        console.error(error);\n      }\n    }\n  }\n\n  return (\n    <Button\n      primary\n      label=\"Take Earnings\"\n      style={style}\n      onClick={takeEarnings}\n    />\n  );\n};\n\nexport default TakeEarnings;\n","import { Button } from \"grommet\";\nimport React, { FC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { BOX, COLORS, DASH } from \"../theme\";\nimport GetFixtures from \"./viewComponents/GetFixtures\";\nimport TakeEarnings from \"./utils/TakeEarnings\";\n\nconst AdminDashboard: FC = () => {\n  return (\n    <div style={adminDashboardStyle}>\n      <div style={dashboardHeaderStyle}>\n        <h2>Welcome to the Admin Dashboard!</h2>\n        <Link to='/admin/AddFixture'>\n          <Button primary label='Add Fixture' />\n        </Link>\n      </div>\n      <TakeEarnings style={{float: \"right\"}} />\n      <br />\n      <GetFixtures admin />\n    </div>\n  );\n};\n\nconst adminDashboardStyle: React.CSSProperties = {\n  color: COLORS.purple,\n  backgroundColor: \"white\",\n  borderRadius: BOX.borderRadius,\n  padding: BOX.padding,\n  width: DASH.width,\n  minHeight: DASH.minHeight,\n  margin: \"auto\",\n};\n\nconst dashboardHeaderStyle: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  justifyContent: \"space-between\",\n};\n\nexport default AdminDashboard;\n","import React, { FC } from \"react\";\nimport { COLORS } from \"../../../theme\";\nimport AdminDashboard from \"../../AdminDashboard\";\nimport Header from \"../../Header\";\n\nconst AdminPage: FC = () => {\n  document.body.style.backgroundColor = COLORS.purple;\n\n  return (\n    <>\n      <Header />\n      <AdminDashboard />\n    </>\n  );\n};\n\nexport default AdminPage;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Dapp } from \"./components/DeprecatedDapp\";\nimport UQBet from \"./components/pages/UQBet\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\n// We import bootstrap here, but you can remove if you want\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { GlobalStateProvider } from \"./globalState\";\nimport AddFixturePage from \"./components/pages/admin/AddFixturePage\";\nimport { Grommet } from \"grommet\";\nimport { theme } from \"./theme\";\nimport AdminPage from \"./components/pages/admin/AdminPage\";\n\n// This is the entry point of your application, but it just renders the Dapp\n// react component. All of the logic is contained in it.\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Grommet theme={theme}>\n      <GlobalStateProvider>\n        <BrowserRouter>\n          <Routes>\n            <Route path='/' element={<UQBet />} />\n            <Route path='/admin' element={<AdminPage />} />\n            <Route path='/admin/AddFixture' element={<AddFixturePage />} />\n            <Route path='/DeprecatedDapp' element={<Dapp />} />\n          </Routes>\n        </BrowserRouter>\n      </GlobalStateProvider>\n    </Grommet>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}